@page "/login"
@using System.Web
@using GylleneDroppen.Blazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="golden-card">
        <div class="card-content">
            <div class="logo-circle">
                <span class="logo-text font-great-vibes">GD</span>
            </div>
            <h1 class="title font-geist-sans">Gyllene Droppen</h1>

            <p class="subtitle">Logga in</p>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="error-message">
                    @_errorMessage
                    <button type="button" class="close-button" @onclick="DismissError">×</button>
                </div>
            }

            <form @onsubmit="HandleLogin">
                <div class="input-group">
                    <input type="email" id="email" @bind="_email" placeholder="E-postadress"/>
                    <label for="email">E-postadress</label>
                </div>

                <div class="input-group">
                    <input type="@(_showPassword ? "text" : "password")" id="password" @bind="_password"
                           placeholder="Lösenord"/>
                    <label for="password">Lösenord</label>
                    <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                        @(_showPassword ? "Dölj" : "Visa")
                    </button>
                </div>

                <button type="submit" class="submit-button" disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <span>Loggar in...</span>
                    }
                    else
                    {
                        <span>Logga in</span>
                    }
                </button>
            </form>

            <div class="register-link">
                Har du inget konto? <a href="/register">Registrera dig här</a>
            </div>

            <div class="divider"></div>

            <div class="social-links">
                <p>Följ eller kontakta oss</p>
                <div class="links">
                    <a href="mailto:info@gyllenedroppen.se" target="_blank" rel="noopener noreferrer"
                       class="social-link">
                        <i class="email-icon"></i>
                    </a>
                    <a href="https://www.instagram.com/gyllene_droppen" target="_blank" rel="noopener noreferrer"
                       class="social-link">
                        <i class="instagram-icon"></i>
                    </a>
                </div>
            </div>

            <footer>
                <p class="copyright">© @DateTime.Now.Year Gyllene Droppen</p>
            </footer>
        </div>
    </div>
</div>

@code {
    private string _email = "";
    private string _password = "";
    private bool _showPassword;
    private bool _isLoading;
    private string _errorMessage = "";

    protected override Task OnInitializedAsync()
    {
        // Check if we need to show a message after verification
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = HttpUtility.ParseQueryString(uri.Query);

        if (queryParameters["verified"] == "true")
        {
            _errorMessage = "Din e-post har verifierats. Du kan nu logga in.";
        }

        return Task.CompletedTask;
    }

    private void DismissError()
    {
        _errorMessage = "";
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private async Task HandleLogin()
    {
        try
        {
            _isLoading = true;
            _errorMessage = "";

            var result = await AuthService.LoginAsync(_email, _password);

            if (result.Success)
            {
                // Check for return URL in the query string
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                var queryParameters = HttpUtility.ParseQueryString(uri.Query);

                if (queryParameters["returnUrl"] != null && !string.IsNullOrEmpty(queryParameters["returnUrl"]))
                {
                    NavigationManager.NavigateTo(queryParameters["returnUrl"] ?? string.Empty);
                }
                else
                {
                    NavigationManager.NavigateTo("/", true);
                }
            }
            else
            {
                _errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett tekniskt fel inträffade: " + ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

}