@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Services

@inject IImageService ImageService
@inject IWhiskyService WhiskyService
@inject IJSRuntime JSRuntime

<div style="font-family: Georgia, serif;">
    @if (!string.IsNullOrEmpty(CurrentImagePath))
    {
        <div style="text-align: center; margin-bottom: 1.5rem;">
            <img src="@CurrentImagePath" alt="Current whisky image" style="max-width: 300px; max-height: 300px; border-radius: 0.375rem; display: block; margin: 0 auto 1rem auto; border: 1px solid #B09B7C; box-shadow: 0 1px 3px rgba(0,0,0,0.15);">
            <button type="button" @onclick="RemoveImage" disabled="@isUploading" style="padding: 0.5rem 1rem; background: #EF4444; color: white; border: 1px solid #EF4444; border-radius: 0.375rem; cursor: pointer; font-weight: 500; font-family: Georgia, serif; transition: all 0.2s ease; @(isUploading ? "opacity: 0.5; cursor: not-allowed;" : "")" onmouseover="if (!@isUploading) { this.style.background='#DC2626'; }" onmouseout="if (!@isUploading) { this.style.background='#EF4444'; }">
                üóëÔ∏è Ta bort bild
            </button>
        </div>
    }

    <div style="margin-bottom: 1rem;">
        <label style="display: block; font-weight: 500; color: #2B1810; margin-bottom: 0.75rem; font-size: 0.875rem;">üì∏ V√§lj en bild:</label>
        <div style="position: relative; display: block; width: 100%;">
            <InputFile OnChange="HandleFileSelected" accept="image/*" disabled="@isUploading" style="position: absolute; top: 0; left: 0; opacity: 0; width: 100%; height: 100%; cursor: pointer; z-index: 10;"/>
            <div style="padding: 1rem 1.5rem; background: #8B4513; color: white; border: 1px solid #8B4513; border-radius: 0.375rem; text-align: center; cursor: pointer; font-weight: 600; font-family: Georgia, serif; transition: all 0.2s ease; position: relative; z-index: 1; @(isUploading ? "opacity: 0.6; cursor: not-allowed;" : "")" onmouseover="if (!@isUploading) { this.style.background='#6B3410'; }" onmouseout="if (!@isUploading) { this.style.background='#8B4513'; }">
                @if (isUploading)
                {
                    <span>‚è≥ Laddar upp bild...</span>
                }
                else
                {
                    <span>üìÅ V√§lj bildfil (JPEG, PNG, GIF, WebP - max 5MB)</span>
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(uploadMessage))
    {
        <div style="padding: 0.75rem 1rem; border-radius: 0.375rem; margin-top: 1rem; font-size: 0.875rem; font-weight: 500; @(uploadMessage.StartsWith("Fel:") ? "background: rgba(239, 68, 68, 0.15); border: 1px solid #EF4444; color: #EF4444;" : "background: rgba(74, 124, 78, 0.15); border: 1px solid #4A7C4E; color: #4A7C4E;")">
            @uploadMessage
        </div>
    }
</div>

@code {
    [Parameter] public Guid? WhiskyId { get; set; }
    [Parameter] public string? CurrentImagePath { get; set; }
    [Parameter] public EventCallback<string> OnImageUploaded { get; set; }
    [Parameter] public EventCallback OnImageRemoved { get; set; }

    private bool isUploading = false;
    private string uploadMessage = string.Empty;
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
            return;

        uploadMessage = string.Empty;

        // Validate file type
        if (!ImageService.IsValidImageType(file.ContentType))
        {
            uploadMessage = "Fel: Endast JPEG, PNG, GIF och WebP-bilder √§r till√•tna.";
            return;
        }

        // Validate file size
        if (!ImageService.IsValidImageSize(file.Size, MaxFileSize))
        {
            uploadMessage = "Fel: Bilden f√•r inte vara st√∂rre √§n 5MB.";
            return;
        }

        isUploading = true;
        StateHasChanged();

        try
        {
            // Remove old image if exists
            if (!string.IsNullOrEmpty(CurrentImagePath))
            {
                await ImageService.DeleteImageAsync(CurrentImagePath);
            }

            // Upload new image
            using var stream = file.OpenReadStream(MaxFileSize);
            var imagePath = await ImageService.SaveImageAsync(stream, file.Name);

            // Update whisky image path if WhiskyId is provided
            if (WhiskyId.HasValue)
            {
                await WhiskyService.UpdateWhiskyImageAsync(WhiskyId.Value, imagePath);
            }

            // Notify parent component
            await OnImageUploaded.InvokeAsync(imagePath);

            uploadMessage = "Bilden har laddats upp.";
        }
        catch (Exception ex)
        {
            uploadMessage = $"Fel vid uppladdning: {ex.Message}";
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task RemoveImage()
    {
        if (string.IsNullOrEmpty(CurrentImagePath))
            return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "√Ñr du s√§ker p√• att du vill ta bort bilden?");
        if (!confirmed)
            return;

        try
        {
            await ImageService.DeleteImageAsync(CurrentImagePath);

            if (WhiskyId.HasValue)
            {
                await WhiskyService.UpdateWhiskyImageAsync(WhiskyId.Value, string.Empty);
            }

            await OnImageRemoved.InvokeAsync();
            uploadMessage = "Bilden har tagits bort.";
        }
        catch (Exception ex)
        {
            uploadMessage = $"Fel vid borttagning: {ex.Message}";
        }
    }

}