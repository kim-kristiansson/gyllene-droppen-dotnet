@page "/logga-in"
@using GylleneDroppen.Application.Dtos.Auth
@using GylleneDroppen.Application.Interfaces.Services
@inject IAuthService AuthService
@inject NavigationManager Nav
@rendermode InteractiveServer

<EditForm Model="_form" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText @bind-Value="_form.Email" placeholder="E-post"/>
    <ValidationMessage For="@(() => _form.Email)"/>

    <InputText @bind-Value="_form.Password" type="password" placeholder="Lösenord"/>
    <ValidationMessage For="@(() => _form.Password)"/>

    <button type="submit">Logga in</button>
</EditForm>

@if (!string.IsNullOrEmpty(_error))
{
    <p style="color:red">@_error</p>
}

@code {
    private readonly LoginRequestDto _form = new();
    private string? _error;

    private async Task HandleLogin()
    {
        var isValid = await AuthService.ValidateCredentialsAsync(_form.Email, _form.Password);

        if (isValid)
        {
            // Navigate to the Razor Page that does login (server-side)
            Nav.NavigateTo($"/Login?email={Uri.EscapeDataString(_form.Email)}&returnUrl={Uri.EscapeDataString("/")}", true);
        }
        else
        {
            _error = "Fel e-post eller lösenord.";
        }
    }

}
