@page "/registrera"
@using GylleneDroppen.Application.Dtos.Auth
@using GylleneDroppen.Application.Interfaces.Services
@inject IAuthService AuthService
@inject NavigationManager Nav
@rendermode InteractiveServer

<h3>Registrera konto</h3>

@if (!string.IsNullOrEmpty(_message))
{
    <div>@_message</div>
}

<EditForm Model="_form" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <label>Förnamn</label>
    <InputText @bind-Value="_form.FirstName"/>
    <ValidationMessage For="@(() => _form.FirstName)"/>

    <label>Efternamn</label>
    <InputText @bind-Value="_form.LastName"/>
    <ValidationMessage For="@(() => _form.LastName)"/>

    <label>E-post</label>
    <InputText @bind-Value="_form.Email"/>
    <ValidationMessage For="@(() => _form.Email)"/>

    <label>Lösenord</label>
    <InputText type="password" @bind-Value="_form.Password"/>
    <ValidationMessage For="@(() => _form.Password)"/>

    <label>Bekräfta lösenord</label>
    <InputText type="password" @bind-Value="_form.ConfirmPassword"/>
    <ValidationMessage For="@(() => _form.ConfirmPassword)"/>

    <button type="submit">Registrera</button>
</EditForm>

@code {
    private readonly RegisterRequestDto _form = new();
    private string? _message;

    private async Task HandleRegister()
    {
        try
        {
            await AuthService.RegisterAsync(_form);
            _message = "✅ Ett bekräftelsemail har skickats till din e-post.";
        }
        catch (Exception ex)
        {
            _message = $"❌ Kunde inte registrera användaren: {ex.Message}";
        }
    }

}