@page "/konto/logga-in"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Logga in</PageTitle>

<h1>Logga in</h1>

<section>
    <StatusMessage Message="@errorMessage"/>
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        <h2>Använd ett lokalt konto för att logga in.</h2>
        <hr/>
        <ValidationSummary role="alert"/>

        <div>
            <InputText @bind-Value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true"
                       placeholder="namn@example.com"/>
            <label for="Input.Email">E-post</label>
            <ValidationMessage For="() => Input.Email"/>
        </div>

        <div>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" autocomplete="current-password"
                       aria-required="true" placeholder="lösenord"/>
            <label for="Input.Password">Lösenord</label>
            <ValidationMessage For="() => Input.Password"/>
        </div>

        <div>
            <label>
                <InputCheckbox @bind-Value="Input.RememberMe"/>
                Kom ihåg mig
            </label>
        </div>

        <div>
            <button type="submit">Logga in</button>
        </div>

        <div>
            <p>
                <a href="/konto/glomt-losenord">Glömt ditt lösenord?</a>
            </p>
            <p>
                <a href="@NavigationManager.GetUriWithQueryParameters("/konto/registrera", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">Registrera
                    ny användare</a>
            </p>
            <p>
                <a href="/konto/skicka-epostbekraftelse">Skicka bekräftelsemail igen</a>
            </p>
        </div>
    </EditForm>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Användare inloggad.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/konto/logga-in-med-2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Användarkonto låst.");
            RedirectManager.RedirectTo("/konto/utlasning");
        }
        else
        {
            errorMessage = "Fel: Ogiltigt inloggningsförsök.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-post är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lösenord är obligatoriskt.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Kom ihåg mig")] public bool RememberMe { get; set; }
    }

}
