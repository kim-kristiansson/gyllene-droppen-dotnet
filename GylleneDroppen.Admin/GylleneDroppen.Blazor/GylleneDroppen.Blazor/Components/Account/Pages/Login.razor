@page "/konto/logga-in"
@layout PublicLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Logga in</PageTitle>

<!-- Subtitle -->
<div style="text-align: center; margin-bottom: 2rem;">
    <p style="font-size: 1rem; color: #5C4A3A; margin: 0; font-family: Georgia, serif; font-style: italic;">
        Logga in för att fortsätta
    </p>
</div>

<!-- Login Form -->
<div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="padding: 1rem; margin-bottom: 1.5rem; background: rgba(239, 68, 68, 0.1); border: 1px solid #EF4444; border-radius: 0.375rem; color: #EF4444; font-family: Georgia, serif;">
            @errorMessage
        </div>
    }

    <h2 style="color: #2B1810; margin: 0 0 1.5rem 0; font-size: 1.5rem; font-weight: 600; font-family: Georgia, serif; text-align: center;">Logga in med ditt konto</h2>
    
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        
        <ValidationSummary role="alert" style="padding: 1rem; margin-bottom: 1.5rem; background: rgba(239, 68, 68, 0.1); border: 1px solid #EF4444; border-radius: 0.375rem; color: #EF4444; font-family: Georgia, serif;"/>

        <div style="margin-bottom: 1.5rem;">
            <label for="Input.Email" style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-family: Georgia, serif; font-size: 0.875rem;">E-postadress</label>
            <InputText @bind-Value="Input.Email" id="Input.Email" style="width: 100%; padding: 0.75rem 1rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 1rem; background: #F0EDE4; color: #2B1810; font-family: Georgia, serif;" autocomplete="username" aria-required="true" placeholder="din@email.com"/>
            <ValidationMessage For="() => Input.Email" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.25rem; display: block; font-family: Georgia, serif;"/>
        </div>

        <div style="margin-bottom: 1.5rem;">
            <label for="Input.Password" style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-family: Georgia, serif; font-size: 0.875rem;">Lösenord</label>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" style="width: 100%; padding: 0.75rem 1rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 1rem; background: #F0EDE4; color: #2B1810; font-family: Georgia, serif;" autocomplete="current-password" aria-required="true" placeholder="Ange ditt lösenord"/>
            <ValidationMessage For="() => Input.Password" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.25rem; display: block; font-family: Georgia, serif;"/>
        </div>

        <div style="margin-bottom: 1.5rem;">
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <InputCheckbox @bind-Value="Input.RememberMe" id="Input.RememberMe" style="width: 1.125rem; height: 1.125rem;"/>
                <label for="Input.RememberMe" style="font-weight: 600; color: #2B1810; font-size: 0.875rem; cursor: pointer; font-family: Georgia, serif;">
                    Kom ihåg mig på denna enhet
                </label>
            </div>
        </div>

        <button type="submit" style="width: 100%; padding: 0.875rem 1.5rem; background: #8B4513; color: white; border: none; border-radius: 0.375rem; font-size: 1rem; font-weight: 600; cursor: pointer; transition: background 0.2s ease; font-family: Georgia, serif; margin-top: 1rem;" onmouseover="this.style.background='#6B3410';" onmouseout="this.style.background='#8B4513';">
            Logga in
        </button>
    </EditForm>
    
    <div style="text-align: center; margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid #B09B7C;">
        <p style="margin: 0 0 0.75rem 0; color: #5C4A3A; font-size: 0.875rem; font-family: Georgia, serif;">
            <a href="/konto/glomt-losenord" style="color: #8B4513; text-decoration: none; font-weight: 600;" onmouseover="this.style.textDecoration='underline';" onmouseout="this.style.textDecoration='none';">Glömt ditt lösenord?</a>
        </p>
        <p style="margin: 0 0 0.75rem 0; color: #5C4A3A; font-size: 0.875rem; font-family: Georgia, serif;">
            Har du inget konto? 
            <a href="@NavigationManager.GetUriWithQueryParameters("/konto/registrera", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })" style="color: #8B4513; text-decoration: none; font-weight: 600;" onmouseover="this.style.textDecoration='underline';" onmouseout="this.style.textDecoration='none';">Registrera dig här</a>
        </p>
        <p style="margin: 0; color: #5C4A3A; font-size: 0.875rem; font-family: Georgia, serif;">
            <a href="/konto/skicka-epostbekraftelse" style="color: #8B4513; text-decoration: none; font-weight: 600;" onmouseover="this.style.textDecoration='underline';" onmouseout="this.style.textDecoration='none';">Behöver du återställa e-postbekräftelse?</a>
        </p>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Check if user is already authenticated
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Redirect to home or return URL if already logged in
                NavigationManager.NavigateTo(ReturnUrl ?? "/");
                return;
            }
            
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Användare inloggad.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/konto/logga-in-med-2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Användarkonto låst.");
            RedirectManager.RedirectTo("/konto/utlasning");
        }
        else
        {
            errorMessage = "Fel: Ogiltigt inloggningsförsök.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-post är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lösenord är obligatoriskt.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Kom ihåg mig")] public bool RememberMe { get; set; }
    }

}
