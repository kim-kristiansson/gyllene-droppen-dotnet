@page "/konto/logga-in"
@layout PublicLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Logga in</PageTitle>

<div class="login-header">
    <h1>Välkommen tillbaka</h1>
    <p class="login-subtitle">Logga in för att fortsätta till Gyllene Droppen</p>
</div>

<section class="login-form">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="status-message error">
            @errorMessage
        </div>
    }
    
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        
        <div class="form-section">
            <h2>Logga in med ditt konto</h2>
            <hr class="form-divider"/>
            
            <ValidationSummary role="alert" class="validation-summary"/>

            <div class="form-group">
                <label for="Input.Email" class="form-label">E-postadress</label>
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true"
                           placeholder="din@email.com"/>
                <ValidationMessage For="() => Input.Email" class="validation-message"/>
            </div>

            <div class="form-group">
                <label for="Input.Password" class="form-label">Lösenord</label>
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password"
                           aria-required="true" placeholder="Ange ditt lösenord"/>
                <ValidationMessage For="() => Input.Password" class="validation-message"/>
            </div>

            <div class="form-check">
                <label>
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input"/>
                    Kom ihåg mig på denna enhet
                </label>
            </div>

            <button type="submit" class="btn btn-primary btn-login">
                Logga in
            </button>
        </div>

    </EditForm>
    
    <div class="auth-links">
        <p>
            <a href="/konto/glomt-losenord">Glömt ditt lösenord?</a>
        </p>
        <p>
            Har du inget konto? 
            <a href="@NavigationManager.GetUriWithQueryParameters("/konto/registrera", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">Registrera dig här</a>
        </p>
        <p>
            <a href="/konto/skicka-epostbekraftelse">Behöver du återställa e-postbekräftelse?</a>
        </p>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Användare inloggad.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/konto/logga-in-med-2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Användarkonto låst.");
            RedirectManager.RedirectTo("/konto/utlasning");
        }
        else
        {
            errorMessage = "Fel: Ogiltigt inloggningsförsök.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-post är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lösenord är obligatoriskt.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Kom ihåg mig")] public bool RememberMe { get; set; }
    }

}
