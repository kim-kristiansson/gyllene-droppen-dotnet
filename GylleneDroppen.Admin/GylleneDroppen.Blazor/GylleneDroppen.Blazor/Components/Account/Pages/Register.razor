@page "/konto/registrera"
@layout PublicLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GylleneDroppen.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrera</PageTitle>

<div class="register-header">
    <h1>Välkommen till Gyllene Droppen</h1>
    <p class="register-subtitle">Skapa ditt konto och börja din whiskyresa</p>
</div>

<div class="trial-banner">
    <h3>🎁 Gratis provmedlemskap</h3>
    <p>Som ny medlem får du prova en gratis whiskyprovning innan du väljer medlemskap!</p>
</div>

<section class="register-form">
    <StatusMessage Message="@Message"/>

    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator/>
        
        <div class="form-section">
            <h2>Skapa ditt konto</h2>
            <hr class="form-divider"/>
            
            <ValidationSummary role="alert" class="validation-summary"/>

            <div class="form-group">
                <label for="Input.Email" class="form-label">E-postadress</label>
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true"
                           placeholder="din@email.com"/>
                <ValidationMessage For="() => Input.Email" class="validation-message"/>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="Input.FirstName" class="form-label">Förnamn</label>
                    <InputText @bind-Value="Input.FirstName" id="Input.FirstName" class="form-control" 
                               aria-required="true" placeholder="Ditt förnamn"/>
                    <ValidationMessage For="() => Input.FirstName" class="validation-message"/>
                </div>

                <div class="form-group">
                    <label for="Input.LastName" class="form-label">Efternamn</label>
                    <InputText @bind-Value="Input.LastName" id="Input.LastName" class="form-control" 
                               aria-required="true" placeholder="Ditt efternamn"/>
                    <ValidationMessage For="() => Input.LastName" class="validation-message"/>
                </div>
            </div>

            <div class="form-group">
                <label for="Input.Password" class="form-label">Lösenord</label>
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password"
                           aria-required="true" placeholder="Välj ett säkert lösenord"/>
                <ValidationMessage For="() => Input.Password" class="validation-message"/>
                
                <div class="password-requirements">
                    <h4>Lösenordskrav:</h4>
                    <ul>
                        <li>Minst 6 tecken långt</li>
                        <li>Innehålla minst en stor bokstav</li>
                        <li>Innehålla minst en siffra</li>
                    </ul>
                </div>
            </div>

            <div class="form-group">
                <label for="Input.ConfirmPassword" class="form-label">Bekräfta lösenord</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control"
                           autocomplete="new-password" aria-required="true" placeholder="Upprepa ditt lösenord"/>
                <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message"/>
            </div>

            <button type="submit" class="btn btn-primary btn-register">
                Registrera konto
            </button>
        </div>
    </EditForm>
    
    <div class="auth-links">
        <p>
            Har du redan ett konto? 
            <a href="@NavigationManager.GetUriWithQueryParameters("/konto/logga-in", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">Logga in här</a>
        </p>
    </div>
</section>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Fel: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("Användare skapade ett nytt konto med lösenord.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/konto/bekrafta-epost").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "/konto/registreringsbekraftelse",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Kan inte skapa en instans av '{nameof(ApplicationUser)}'. " +
                                                $"Säkerställ att '{nameof(ApplicationUser)}' inte är abstrakt och har en parameterlös konstruktor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("Gränssnittet kräver en användarstore med e-poststöd.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-postadress är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        [Display(Name = "E-postadress")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Förnamn är obligatoriskt.")]
        [StringLength(50, ErrorMessage = "Förnamn får inte vara längre än 50 tecken.")]
        [Display(Name = "Förnamn")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Efternamn är obligatoriskt.")]
        [StringLength(50, ErrorMessage = "Efternamn får inte vara längre än 50 tecken.")]
        [Display(Name = "Efternamn")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Lösenord är obligatoriskt.")]
        [StringLength(100, ErrorMessage = "{0} måste vara minst {2} och högst {1} tecken långt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Lösenord")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Bekräfta lösenord")]
        [Compare("Password", ErrorMessage = "Lösenorden stämmer inte överens.")]
        public string ConfirmPassword { get; set; } = "";
    }

}
