@page "/konto/logga-in-med-2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Tvåfaktorsautentisering</PageTitle>

<h1>Tvåfaktorsautentisering</h1>
<hr/>
<StatusMessage Message="@message"/>
<p>Din inloggning är skyddad med en autentiseringsapp. Ange din verifieringskod nedan.</p>

<EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
    <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
    <input type="hidden" name="RememberMe" value="@RememberMe"/>
    <DataAnnotationsValidator/>
    <ValidationSummary role="alert"/>

    <div>
        <InputText @bind-Value="Input.TwoFactorCode" id="Input.TwoFactorCode" autocomplete="off"/>
        <label for="Input.TwoFactorCode">Verifieringskod</label>
        <ValidationMessage For="() => Input.TwoFactorCode"/>
    </div>

    <div>
        <label for="remember-machine">
            <InputCheckbox @bind-Value="Input.RememberMachine"/>
            Kom ihåg denna enhet
        </label>
    </div>

    <div>
        <button type="submit">Logga in</button>
    </div>
</EditForm>

<p>
    Har du inte tillgång till din autentiseringsenhet? Du kan
    <a href="/konto/logga-in-med-reservkod?ReturnUrl=@ReturnUrl">logga in med en reservkod</a>.
</p>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync()
               ?? throw new InvalidOperationException("Kunde inte läsa användare för tvåfaktorsautentisering.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("Användare med ID '{UserId}' loggade in med 2FA.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Användare med ID '{UserId}' är låst.", userId);
            RedirectManager.RedirectTo("/konto/utlasning");
        }
        else
        {
            Logger.LogWarning("Ogiltig verifieringskod angavs för användare med ID '{UserId}'.", userId);
            message = "Fel: Ogiltig verifieringskod.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Verifieringskod är obligatorisk.")]
        [StringLength(7, ErrorMessage = "{0} måste vara minst {2} och högst {1} tecken långt.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verifieringskod")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Kom ihåg denna enhet")]
        public bool RememberMachine { get; set; }
    }

}
