@page "/konto/logga-in-med-reservkod"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Verifiering med reservkod</PageTitle>

<h1>Verifiering med reservkod</h1>
<hr/>
<StatusMessage Message="@message"/>
<p>
    Du har begärt att logga in med en reservkod. Denna inloggning kommer inte att kommas ihåg förrän du anger
    en kod från autentiseringsappen eller inaktiverar 2FA och loggar in igen.
</p>

<EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary role="alert"/>

    <div>
        <InputText @bind-Value="Input.RecoveryCode" id="Input.RecoveryCode" autocomplete="off" placeholder="Reservkod"/>
        <label for="Input.RecoveryCode">Reservkod</label>
        <ValidationMessage For="() => Input.RecoveryCode"/>
    </div>

    <button type="submit">Logga in</button>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync()
               ?? throw new InvalidOperationException("Kunde inte läsa användare för tvåfaktorsautentisering.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);
        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("Användare med ID '{UserId}' loggade in med en reservkod.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Användarkonto låst.");
            RedirectManager.RedirectTo("/konto/utlasning");
        }
        else
        {
            Logger.LogWarning("Ogiltig reservkod angavs för användare med ID '{UserId}'", userId);
            message = "Fel: Ogiltig reservkod angavs.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Reservkod är obligatorisk.")]
        [DataType(DataType.Text)]
        [Display(Name = "Reservkod")]
        public string RecoveryCode { get; set; } = "";
    }

}
