@page "/konto/aterstall-losenord"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using GylleneDroppen.Core.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Återställ lösenord</PageTitle>

<h1>Återställ lösenord</h1>
<h2>Ange ett nytt lösenord</h2>
<hr/>

<StatusMessage Message="@Message"/>

<EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary role="alert"/>

    <input type="hidden" name="Input.Code" value="@Input.Code"/>

    <div>
        <InputText @bind-Value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true"
                   placeholder="namn@example.com"/>
        <label for="Input.Email">E-postadress</label>
        <ValidationMessage For="() => Input.Email"/>
    </div>

    <div>
        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" autocomplete="new-password"
                   aria-required="true" placeholder="Ange nytt lösenord"/>
        <label for="Input.Password">Lösenord</label>
        <ValidationMessage For="() => Input.Password"/>
    </div>

    <div>
        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                   autocomplete="new-password" aria-required="true" placeholder="Bekräfta lösenordet"/>
        <label for="Input.ConfirmPassword">Bekräfta lösenord</label>
        <ValidationMessage For="() => Input.ConfirmPassword"/>
    </div>

    <button type="submit">Återställ</button>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Fel: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("/konto/ogiltig-aterstallning");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            RedirectManager.RedirectTo("/konto/bekraftelse-aterstallning");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("/konto/bekraftelse-aterstallning");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-postadress är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lösenord är obligatoriskt.")]
        [StringLength(100, ErrorMessage = "{0} måste vara minst {2} och högst {1} tecken långt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Lösenord")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Bekräfta lösenord")]
        [Compare("Password", ErrorMessage = "Lösenorden stämmer inte överens.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}
