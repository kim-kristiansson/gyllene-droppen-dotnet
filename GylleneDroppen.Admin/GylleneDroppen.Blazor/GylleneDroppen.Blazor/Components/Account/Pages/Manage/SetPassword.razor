@page "/konto/hantera/skapa-losenord"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sätt lösenord</PageTitle>

<h3>Sätt ditt lösenord</h3>
<StatusMessage Message="@message"/>
<p>
    Du har inget lokalt användarnamn/lösenord för denna sida. Lägg till ett lokalt
    konto så att du kan logga in utan extern inloggning.
</p>

<EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary role="alert"/>

    <div>
        <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" autocomplete="new-password"
                   placeholder="Ange nytt lösenord"/>
        <label for="Input.NewPassword">Nytt lösenord</label>
        <ValidationMessage For="() => Input.NewPassword"/>
    </div>

    <div>
        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                   autocomplete="new-password" placeholder="Bekräfta nytt lösenord"/>
        <label for="Input.ConfirmPassword">Bekräfta lösenord</label>
        <ValidationMessage For="() => Input.ConfirmPassword"/>
    </div>

    <button type="submit">Sätt lösenord</button>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("/konto/hantera/byt-losenord");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Fel: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Ditt lösenord har sparats.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Nytt lösenord är obligatoriskt.")]
        [StringLength(100, ErrorMessage = "{0} måste vara minst {2} och högst {1} tecken långt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nytt lösenord")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Bekräfta nytt lösenord")]
        [Compare("NewPassword", ErrorMessage = "Det nya lösenordet och bekräftelsen stämmer inte överens.")]
        public string? ConfirmPassword { get; set; }
    }

}
