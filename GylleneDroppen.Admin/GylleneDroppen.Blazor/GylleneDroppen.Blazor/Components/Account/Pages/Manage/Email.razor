@page "/konto/hantera/epost"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GylleneDroppen.Core.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Hantera e-post</PageTitle>

<div class="page-wrapper">
    <div class="page-content">
        <div class="page-header-section">
            <h1 class="page-title">Hantera ditt konto</h1>
        </div>
        
        <div class="grid-2">
            <div class="nav-section">
                <h3>Kontoinställningar</h3>
                <ManageNavMenu/>
            </div>
            
            <div class="content-section">
                <h2>E-post</h2>
                <StatusMessage Message="@message"/>
                
                <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                    <AntiforgeryToken/>
                </form>
                
                <div class="form-container">
                    <div class="current-email">
                        <h3>Nuvarande e-post</h3>
                        <div class="email-status">
                            <div class="email-display">
                                <input type="text" value="@email" class="form-input" disabled/>
                                @if (isEmailConfirmed)
                                {
                                    <span class="status-badge verified">✓ Verifierad</span>
                                }
                                else
                                {
                                    <span class="status-badge unverified">! Ej verifierad</span>
                                }
                            </div>
                            @if (!isEmailConfirmed)
                            {
                                <button type="submit" form="send-verification-form" class="btn btn-secondary btn-sm">
                                    Skicka verifieringsmejl
                                </button>
                            }
                        </div>
                    </div>
                    
                    <div class="change-email">
                        <h3>Ändra e-post</h3>
                        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator/>
                            <ValidationSummary class="validation-summary" role="alert"/>
                            
                            <div class="form-field">
                                <label for="Input.NewEmail">Ny e-postadress</label>
                                <InputText @bind-Value="Input.NewEmail" id="Input.NewEmail" class="form-input" 
                                          autocomplete="email" aria-required="true" placeholder="Ange en ny e-post"/>
                                <ValidationMessage For="() => Input.NewEmail" class="validation-message"/>
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Byt e-post</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Din e-postadress är oförändrad.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/konto/bekrafta-epostbyte").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Bekräftelselänk för att byta e-post har skickats. Kontrollera din e-post.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/konto/bekrafta-epost").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verifieringsmejl har skickats. Kontrollera din e-post.";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ny e-post är obligatorisk.")]
        [EmailAddress(ErrorMessage = "Ogiltig e-postadress.")]
        [Display(Name = "Ny e-post")]
        public string? NewEmail { get; set; }
    }

}
