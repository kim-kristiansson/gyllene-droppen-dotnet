@page "/konto/hantera/aterstall-autentiserare"

@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Återställ autentiseringsnyckel</PageTitle>

<StatusMessage/>
<h3>Återställ autentiseringsnyckel</h3>
<div role="alert">
    <p>
        <strong>Om du återställer din autentiseringsnyckel kommer din autentiseringsapp inte att fungera förrän du har
            konfigurerat den på nytt.</strong>
    </p>
    <p>
        Denna process inaktiverar 2FA tills du har verifierat din autentiseringsapp.
        Om du inte slutför konfigurationen kan du förlora åtkomsten till ditt konto.
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken/>
        <button type="submit">Återställ autentiseringsnyckel</button>
    </form>
</div>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("Användare med ID '{UserId}' har återställt sin autentiseringsnyckel.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "/konto/hantera/aktivera-autentiserare",
            "Din autentiseringsnyckel har återställts. Du måste konfigurera din autentiseringsapp med den nya nyckeln.",
            HttpContext);
    }

}