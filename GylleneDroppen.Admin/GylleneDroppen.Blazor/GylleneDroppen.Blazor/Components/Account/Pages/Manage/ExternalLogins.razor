@page "/konto/hantera/externa-inloggningar"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Hantera dina externa inloggningar</PageTitle>

<StatusMessage/>
@if (currentLogins?.Count > 0)
{
    <h3>Registrerade inloggningar</h3>
    <table>
        <tbody>
        @foreach (var login in currentLogins)
        {
            <tr>
                <td>@login.ProviderDisplayName</td>
                <td>
                    @if (showRemoveButton)
                    {
                        <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync"
                              method="post">
                            <AntiforgeryToken/>
                            <div>
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                <button type="submit" title="Ta bort @login.ProviderDisplayName från ditt konto">Ta
                                    bort
                                </button>
                            </div>
                        </form>
                    }
                    else
                    {
                        @: &nbsp;
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <h4>Lägg till en annan inloggningstjänst</h4>
    <hr/>
    <form action="/konto/hantera/lanka-extern-inloggning" method="post">
        <AntiforgeryToken/>
        <div>
            <p>
                @foreach (var provider in otherLogins)
                {
                    <button type="submit" name="Provider" value="@provider.Name"
                            title="Logga in med @provider.DisplayName">
                        @provider.DisplayName
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Fel: Den externa inloggningen kunde inte tas bort.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Den externa inloggningen har tagits bort.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Fel: Kunde inte läsa extern inloggningsinformation.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Fel: Den externa inloggningen kunde inte läggas till. En extern inloggning kan endast kopplas till ett konto.", HttpContext);
        }

        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("Den externa inloggningen har lagts till.", HttpContext);
    }

}
