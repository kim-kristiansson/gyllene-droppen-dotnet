@page "/konto/hantera/radera-personuppgifter"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GylleneDroppen.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Radera personuppgifter</PageTitle>

<StatusMessage Message="@message"/>

<h3>Radera personuppgifter</h3>

<div role="alert">
    <p>
        <strong>Att radera dina uppgifter innebär att ditt konto tas bort permanent och inte kan återställas.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary role="alert"/>
        @if (requirePassword)
        {
            <div>
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                           autocomplete="current-password" aria-required="true" placeholder="Ange ditt lösenord."/>
                <label for="Input.Password">Lösenord</label>
                <ValidationMessage For="() => Input.Password"/>
            </div>
        }
        <button type="submit">Radera uppgifter och stäng mitt konto</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Fel: Felaktigt lösenord.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Ett oväntat fel inträffade vid borttagning av användare.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("Användare med ID '{UserId}' raderade sitt konto.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        [Display(Name = "Lösenord")]
        public string Password { get; set; } = "";
    }

}
