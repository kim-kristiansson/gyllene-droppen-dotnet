@page "/provningar"
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.TastingEvent
@using GylleneDroppen.Application.Dtos.Membership
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject ITastingEventService TastingEventService
@inject IMembershipService MembershipService
@inject NavigationManager NavigationManager
@inject ICurrentUserService CurrentUserService

@rendermode InteractiveServer

<PageTitle>Provningar</PageTitle>

<div class="page-header">
    <h1>Provningar</h1>
</div>

<AuthorizeView>
    <Authorized>
        @if (membershipStatus != null)
        {
            <div class="membership-status @(membershipStatus.HasActiveMembership ? "active" : membershipStatus.HasTrialAvailable ? "trial" : "expired")">
                @if (membershipStatus.HasActiveMembership)
                {
                    <p>‚ú® Ditt medlemskap √§r aktivt till: <strong>@membershipStatus.MembershipEndDate?.ToString("yyyy-MM-dd")</strong></p>
                }
                else if (membershipStatus.HasTrialAvailable)
                {
                    <p>üéÅ Du har en gratis provmedlemskap tillg√§nglig</p>
                }
                else if (membershipStatus.HasUsedTrial)
                {
                    <p>‚ö†Ô∏è Du har anv√§nt ditt provmedlemskap. K√∂p medlemskap f√∂r att forts√§tta delta i event.</p>
                }
            </div>
        }
        
        <div class="btn-create">
            <button class="btn btn-primary" @onclick="CreateNewEvent">
                Skapa nytt event
            </button>
        </div>
    </Authorized>
</AuthorizeView>

@if (isLoading)
{
    <div class="loading">
        <p>Laddar provningar...</p>
    </div>
}
else
{
    <div class="events-section">
        <h2 class="section-title">
            Kommande provningar
            <span class="event-count">@upcomingEvents.Count</span>
        </h2>

        @if (upcomingEvents.Any())
        {
            @foreach (var e in upcomingEvents)
            {
                <div class="event-card">
                    <h3 class="event-title">@e.Title</h3>
                    
                    <div class="event-meta">
                        <div class="event-meta-item">
                            <strong>üìÖ Datum:</strong> @e.EventDate.ToString("yyyy-MM-dd HH:mm")
                        </div>
                        
                        @if (!string.IsNullOrEmpty(e.Location))
                        {
                            <div class="event-meta-item">
                                <strong>üìç Plats:</strong> @e.Location
                            </div>
                        }
                        
                        <div class="event-meta-item">
                            <strong>üë§ Organiserad av:</strong> @e.OrganizedByUserName
                        </div>
                        
                        <div class="event-meta-item">
                            <strong>ü•É Whiskies:</strong> @e.WhiskyCount st
                        </div>
                        
                        <div class="event-meta-item">
                            <strong>üë• Deltagare:</strong> @e.ParticipantCount@(e.MaxParticipants.HasValue ? $"/{e.MaxParticipants}" : "") st
                        </div>
                        
                        <div class="event-meta-item">
                            <strong>üåê Typ:</strong> @(e.IsPublic ? "Publik" : "Privat")
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(e.Description))
                    {
                        <div class="event-description">
                            <strong>Beskrivning:</strong> @e.Description
                        </div>
                    }

                    <div class="event-actions">
                        @EventActions(e)
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <p>Inga kommande provningar.</p>
            </div>
        }
    </div>

    <div class="events-section">
        <h2 class="section-title">
            Tidigare provningar
            <span class="event-count">@pastEvents.Count</span>
        </h2>

        @if (pastEvents.Any())
        {
            @foreach (var e in pastEvents)
            {
                <div class="event-card past">
                    <h3 class="event-title">@e.Title</h3>
                    
                    <div class="event-meta">
                        <div class="event-meta-item">
                            <strong>üìÖ Datum:</strong> @e.EventDate.ToString("yyyy-MM-dd HH:mm")
                        </div>
                        
                        @if (!string.IsNullOrEmpty(e.Location))
                        {
                            <div class="event-meta-item">
                                <strong>üìç Plats:</strong> @e.Location
                            </div>
                        }
                        
                        <div class="event-meta-item">
                            <strong>üë§ Organiserad av:</strong> @e.OrganizedByUserName
                        </div>
                        
                        <div class="event-meta-item">
                            <strong>ü•É Whiskies:</strong> @e.WhiskyCount st
                        </div>
                        
                        <div class="event-meta-item">
                            <strong>üë• Deltagare:</strong> @e.ParticipantCount st
                        </div>
                    </div>

                    <div class="event-actions">
                        <button class="btn btn-outline-primary" @onclick="() => ViewEvent(e.Id)">
                            Visa detaljer
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <p>Inga tidigare provningar.</p>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(statusMessage.StartsWith("Fel:") ? "alert-danger" : "alert-success")">
        <strong>@(statusMessage.StartsWith("Fel:") ? "Fel" : "Info"):</strong> @statusMessage
        <button type="button" class="btn btn-sm btn-secondary" @onclick="() => statusMessage = string.Empty">St√§ng</button>
    </div>
}

@code {
    private List<TastingEventDto> upcomingEvents = new();
    private List<TastingEventDto> pastEvents = new();
    private Dictionary<Guid, bool> isUserRegistered = new();
    private bool isLoading = true;
    private bool isProcessing = false;
    private string statusMessage = string.Empty;
    private string? currentUserId;
    private UserMembershipStatusDto? membershipStatus;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = CurrentUserService.GetUserId();
        await LoadEvents();
        await LoadUserRegistrations();
        await LoadMembershipStatus();
    }

    private async Task LoadMembershipStatus()
    {
        if (!string.IsNullOrEmpty(currentUserId))
        {
            try
            {
                membershipStatus = await MembershipService.GetUserMembershipStatusAsync(currentUserId);
            }
            catch
            {
                membershipStatus = null;
            }
        }
        StateHasChanged();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            upcomingEvents = await TastingEventService.GetUpcomingTastingEventsAsync(20);
            pastEvents = await TastingEventService.GetPastTastingEventsAsync(10);
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserRegistrations()
    {
        foreach (var e in upcomingEvents)
        {
            try
            {
                var registered = await TastingEventService.IsUserRegisteredAsync(e.Id, currentUserId ?? "");
                isUserRegistered[e.Id] = registered;
            }
            catch
            {
                isUserRegistered[e.Id] = false;
            }
        }

        StateHasChanged();
    }

    private bool CanEditEvent(TastingEventDto e)
    {
        return true;
    }

    private bool CanRegisterForEvent(TastingEventDto e)
    {
        if (!e.IsPublic) return false;
        if (e.EventDate < DateTime.Now) return false;
        if (e.MaxParticipants.HasValue && e.ParticipantCount >= e.MaxParticipants.Value) return false;
        
        // Check membership status
        if (membershipStatus == null) return false;
        if (!membershipStatus.CanRegisterForEvents) return false;
        
        return true;
    }

    private async Task RegisterForEvent(Guid eventId)
    {
        if (isProcessing) return;

        isProcessing = true;
        statusMessage = string.Empty;

        try
        {
            var isRegistered = isUserRegistered.ContainsKey(eventId) && isUserRegistered[eventId];

            if (isRegistered)
            {
                await TastingEventService.UnregisterFromEventAsync(eventId, currentUserId ?? "");
                isUserRegistered[eventId] = false;
                statusMessage = "Du har avregistrerats fr√•n eventet.";
            }
            else
            {
                await TastingEventService.RegisterForEventAsync(eventId, currentUserId ?? "");
                isUserRegistered[eventId] = true;
                statusMessage = "Du har registrerats f√∂r eventet.";
            }

            await LoadEvents();
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void CreateNewEvent() => NavigationManager.NavigateTo("/tastings/create");
    private void ViewEvent(Guid id) => NavigationManager.NavigateTo($"/tastings/{id}");
    private void EditEvent(Guid id) => NavigationManager.NavigateTo($"/tastings/edit/{id}");

    private RenderFragment Text(string content) => builder =>
    {
        builder.AddContent(0, content);
        builder.AddMarkupContent(1, "<br/>");
    };

    private RenderFragment Button(string label, Action onClick) => builder =>
    {
        builder.OpenElement(0, "button");
        builder.AddAttribute(1, "onclick", EventCallback.Factory.Create(this, onClick));
        builder.AddContent(2, label);
        builder.CloseElement();
    };

    private RenderFragment EventActions(TastingEventDto e) => builder =>
    {
        // View details button
        builder.OpenElement(0, "button");
        builder.AddAttribute(1, "class", "btn btn-outline-primary");
        builder.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, () => ViewEvent(e.Id)));
        builder.AddContent(3, "Visa detaljer");
        builder.CloseElement();
        
        builder.OpenComponent<AuthorizeView>(4);
        builder.AddAttribute(5, "Authorized", (RenderFragment<AuthenticationState>)(context =>
        {
            var fragment = new RenderFragment(childBuilder =>
            {
                if (CanEditEvent(e))
                {
                    childBuilder.OpenElement(0, "button");
                    childBuilder.AddAttribute(1, "class", "btn btn-secondary");
                    childBuilder.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, () => EditEvent(e.Id)));
                    childBuilder.AddContent(3, "Redigera");
                    childBuilder.CloseElement();
                }

                if (CanRegisterForEvent(e))
                {
                    var isRegistered = isUserRegistered.ContainsKey(e.Id) && isUserRegistered[e.Id];
                    var buttonClass = isRegistered ? "btn btn-outline-danger" : "btn btn-gold";
                    var buttonText = isRegistered ? "Avregistrera" : "Registrera";
                    
                    childBuilder.OpenElement(4, "button");
                    childBuilder.AddAttribute(5, "class", buttonClass);
                    childBuilder.AddAttribute(6, "onclick", EventCallback.Factory.Create(this, async () => await RegisterForEvent(e.Id)));
                    childBuilder.AddAttribute(7, "disabled", isProcessing);
                    childBuilder.AddContent(8, buttonText);
                    childBuilder.CloseElement();
                }
                else if (membershipStatus != null && !membershipStatus.CanRegisterForEvents)
                {
                    if (membershipStatus.HasUsedTrial)
                    {
                        childBuilder.OpenElement(9, "span");
                        childBuilder.AddAttribute(10, "class", "membership-required");
                        childBuilder.AddContent(11, "Kr√§ver medlemskap");
                        childBuilder.CloseElement();
                    }
                }
            });
            return fragment;
        }));
        builder.CloseComponent();
    };

}
