@page "/provningar/skapa"
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.TastingEvent
@using GylleneDroppen.Application.Dtos.Whisky
@using Microsoft.AspNetCore.Authorization
@inject ITastingEventService TastingEventService
@inject IWhiskyService WhiskyService
@inject NavigationManager NavigationManager

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Skapa Provning</PageTitle>

<div class="create-event-container">
    <div class="create-event-header">
        <h1>üìÖ Skapa Provning</h1>
        <button @onclick="GoBack" class="back-button">‚Üê Tillbaka till √∂versikt</button>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @(statusMessage.StartsWith("Fel:") ? "error" : "success")">
            <span><strong>@(statusMessage.StartsWith("Fel:") ? "Fel" : "Info"):</strong> @statusMessage</span>
            <button @onclick="() => statusMessage = string.Empty">‚úï</button>
        </div>
    }

    <EditForm Model="eventDto" OnValidSubmit="SubmitCreateEventAsync" class="event-form">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="form-section">
            <h2 class="form-section-title">‚ÑπÔ∏è Grundinformation</h2>
            
            <div class="form-group">
                <label class="form-label required-field">Titel:</label>
                <InputText @bind-value="eventDto.Title" class="form-control" placeholder="T.ex. Highland Single Malts Evening" />
                <ValidationMessage For="() => eventDto.Title" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Beskrivning:</label>
                <InputTextArea @bind-value="eventDto.Description" rows="4" class="form-control form-textarea" 
                               placeholder="Beskriv provningen, vad deltagarna kan f√∂rv√§nta sig..." />
                <ValidationMessage For="() => eventDto.Description" class="validation-message" />
            </div>

            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label required-field">Datum och tid:</label>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="eventDto.EventDate" class="form-control" />
                    <ValidationMessage For="() => eventDto.EventDate" class="validation-message" />
                    <div class="form-tip">
                        V√§lj datum och tid f√∂r n√§r provningen ska √§ga rum.
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Plats:</label>
                    <InputText @bind-value="eventDto.Location" class="form-control" placeholder="T.ex. Konferenslokalen, Huvudkontoret" />
                    <ValidationMessage For="() => eventDto.Location" class="validation-message" />
                </div>
            </div>

            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label">Max antal deltagare:</label>
                    <InputNumber @bind-value="eventDto.MaxParticipants" class="form-control" placeholder="T.ex. 20" />
                    <ValidationMessage For="() => eventDto.MaxParticipants" class="validation-message" />
                    <div class="form-tip">
                        L√§mna tomt f√∂r obegr√§nsat antal deltagare.
                    </div>
                </div>

                <div class="form-group">
                    <div class="form-checkbox-group">
                        <InputCheckbox @bind-value="eventDto.IsPublic" />
                        <label>Publikt event (synligt f√∂r alla medlemmar)</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-section whisky-selection">
            <h2 class="form-section-title">ü•É V√§lj Whiskies</h2>
            
            <div class="whisky-search">
                <input type="text" @bind="whiskySearchTerm" @onkeydown="HandleKeyDown" 
                       class="whisky-search-input" placeholder="S√∂k efter whisky, destilleri eller land..." />
                <button type="button" @onclick="SearchWhiskies" class="search-btn">S√∂k</button>
            </div>

            <div class="whisky-grid">
                <div class="whisky-section">
                    <h3 class="whisky-section-title">Tillg√§ngliga Whiskies</h3>
                    <div class="whisky-list">
                        @if (availableWhiskies.Any())
                        {
                            @foreach (var whisky in availableWhiskies)
                            {
                                <div class="whisky-item">
                                    <div class="whisky-info">
                                        <div class="whisky-name">@whisky.Name</div>
                                        <div class="whisky-details">@whisky.Distillery (@whisky.Country)</div>
                                    </div>
                                    <button type="button" @onclick="() => AddWhisky(whisky)" class="whisky-action-btn">
                                        L√§gg till
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-whisky-state">
                                @if (string.IsNullOrWhiteSpace(whiskySearchTerm))
                                {
                                    <p>S√∂k efter whiskies att l√§gga till i provningen.</p>
                                }
                                else
                                {
                                    <p>Inga whiskies hittades f√∂r "@whiskySearchTerm".</p>
                                }
                            </div>
                        }
                    </div>
                </div>

                <div class="whisky-section">
                    <h3 class="whisky-section-title">
                        Valda Whiskies
                        @if (selectedWhiskies.Any())
                        {
                            <span class="selected-whisky-count">@selectedWhiskies.Count</span>
                        }
                    </h3>
                    <div class="whisky-list">
                        @if (selectedWhiskies.Any())
                        {
                            @foreach (var whisky in selectedWhiskies)
                            {
                                <div class="whisky-item">
                                    <div class="whisky-info">
                                        <div class="whisky-name">@whisky.Name</div>
                                        <div class="whisky-details">@whisky.Distillery</div>
                                    </div>
                                    <button type="button" @onclick="() => RemoveWhisky(whisky)" class="whisky-action-btn remove">
                                        Ta bort
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-whisky-state">
                                <p>Inga whiskies valda √§n. L√§gg till whiskies fr√•n s√∂kresultaten.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" @onclick="GoBack" class="btn-secondary">Avbryt</button>
            <button type="submit" disabled="@isProcessing" class="btn btn-primary">
                @(isProcessing ? "Skapar event..." : "Skapa event")
            </button>
        </div>
    </EditForm>
</div>

@code {
    private CreateTastingEventRequestDto eventDto = new()
    {
        EventDate = DateTime.UtcNow.Date.AddDays(7).AddHours(19),
        WhiskyIds = new()
    };

    private List<WhiskyResponseDto> availableWhiskies = new();
    private List<WhiskyResponseDto> selectedWhiskies = new();
    private string whiskySearchTerm = string.Empty;
    private bool isProcessing = false;
    private string statusMessage = string.Empty;

    private async Task SearchWhiskies()
    {
        if (string.IsNullOrWhiteSpace(whiskySearchTerm))
        {
            availableWhiskies.Clear();
            return;
        }

        try
        {
            var searchResult = await WhiskyService.SearchWhiskiesAsync(new WhiskySearchDto
            {
                SearchTerm = whiskySearchTerm,
                PageSize = 20
            });

            availableWhiskies = searchResult.Whiskies
                .Where(w => !selectedWhiskies.Any(s => s.Id == w.Id))
                .ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel vid s√∂kning: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchWhiskies();
        }
    }

    private void AddWhisky(WhiskyResponseDto whisky)
    {
        if (!selectedWhiskies.Any(w => w.Id == whisky.Id))
        {
            selectedWhiskies.Add(whisky);
            availableWhiskies.Remove(whisky);
            eventDto.WhiskyIds.Add(whisky.Id);
            StateHasChanged();
        }
    }

    private void RemoveWhisky(WhiskyResponseDto whisky)
    {
        selectedWhiskies.Remove(whisky);
        eventDto.WhiskyIds.Remove(whisky.Id);

        if (!string.IsNullOrWhiteSpace(whiskySearchTerm) &&
            (whisky.Name.Contains(whiskySearchTerm, StringComparison.OrdinalIgnoreCase) ||
             whisky.Distillery.Contains(whiskySearchTerm, StringComparison.OrdinalIgnoreCase)))
        {
            availableWhiskies.Add(whisky);
        }

        StateHasChanged();
    }

    private async Task SubmitCreateEventAsync()
    {
        isProcessing = true;
        statusMessage = string.Empty;

        try
        {
            var createdEvent = await TastingEventService.CreateTastingEventAsync(eventDto);
            NavigationManager.NavigateTo($"/tastings/{createdEvent.Id}");
        }
        catch (Exception ex)
        {
            statusMessage = $"Fel: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/provningar");
    }
}
