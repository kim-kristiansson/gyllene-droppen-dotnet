@page "/admin/avdelningar"
@using GylleneDroppen.Application.Dtos.Department
@using GylleneDroppen.Application.Interfaces.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IDepartmentService DepartmentService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Hantera ansvarsomr√•den</PageTitle>

<div style="padding: 1.5rem 0; background: #D4CCC0; color: #2B1810; font-family: Georgia, serif; min-height: 100vh;">
<div class="page-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 2px solid #B09B7C;">
    <h1 style="font-size: 2.25rem; color: #2B1810; margin: 0; font-weight: 600;">üèõÔ∏è Hantera ansvarsomr√•den</h1>
</div>

@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; padding: 3rem; color: #5D4037; font-size: 1.125rem;">
        <div style="display: inline-block; width: 2rem; height: 2rem; border: 3px solid #B09B7C; border-radius: 50%; border-top-color: #8B4513; animation: spin 1s linear infinite; margin-right: 0.75rem;"></div>
        Laddar ansvarsomr√•den...
    </div>
}
else
{
    <div style="margin-bottom: 2rem; padding: 1.5rem; background: #DAD3C7; border: 1px solid #B09B7C; border-radius: 0.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.15);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: @(showCreateForm ? "1.5rem" : "0"); flex-wrap: wrap; gap: 1rem;">
            <h2 style="font-family: Georgia, serif; font-size: 1.5rem; color: #8B4513; margin: 0; font-weight: 600;">Ansvarsomr√•deshantering</h2>
            <button @onclick="ToggleCreateForm" style="background: #8B4513; border: 1px solid #8B4513; color: white; padding: 0.75rem 1.25rem; border-radius: 0.375rem; font-weight: 600; font-family: Georgia, serif; cursor: pointer; transition: all 0.2s ease; white-space: nowrap;" onmouseover="this.style.background='#6B2C0F';" onmouseout="this.style.background='#8B4513';">
@(showCreateForm ? "‚ùå Avbryt" : "‚ûï Skapa nytt ansvarsomr√•de")
            </button>
        </div>
        
        @if (showCreateForm)
        {
            <div style="border-top: 1px solid #B09B7C; padding-top: 1.5rem;">
                <h3 style="font-family: Georgia, serif; font-size: 1.125rem; color: #2B1810; margin: 0 0 1rem 0; font-weight: 600;">
                    @if (editingDepartment != null)
                    {
                        <span>‚úèÔ∏è Redigera ansvarsomr√•de</span>
                    }
                    else
                    {
                        <span>‚ûï Skapa nytt ansvarsomr√•de</span>
                    }
                </h3>
                
                <EditForm Model="departmentForm" OnValidSubmit="SaveDepartment">
                    <DataAnnotationsValidator />
                    <ValidationSummary style="background: rgba(239, 68, 68, 0.15); border: 1px solid #EF4444; border-radius: 0.375rem; padding: 1rem; margin-bottom: 1.5rem; color: #EF4444; font-size: 0.875rem; font-family: Georgia, serif;"/>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-family: Georgia, serif;">Namn <span style="color: #EF4444;">*</span></label>
                        <InputText @bind-Value="departmentForm.Name" style="width: 100%; padding: 0.75rem; border: 1px solid #B09B7C; border-radius: 0.375rem; background: #DFD9CE; color: #2B1810; font-family: Georgia, serif;" placeholder="T.ex. IT-ansvarsomr√•det" />
                        <ValidationMessage For="() => departmentForm.Name" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.25rem; display: block; font-family: Georgia, serif;" />
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-family: Georgia, serif;">Beskrivning</label>
                        <InputTextArea @bind-Value="departmentForm.Description" rows="3" style="width: 100%; padding: 0.75rem; border: 1px solid #B09B7C; border-radius: 0.375rem; background: #DFD9CE; color: #2B1810; font-family: Georgia, serif; resize: vertical;" placeholder="Beskrivning av ansvarsomr√•det..." />
                        <ValidationMessage For="() => departmentForm.Description" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.25rem; display: block; font-family: Georgia, serif;" />
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem; background: #DAD3C7; border: 1px solid #B09B7C; border-radius: 0.375rem;">
                            <InputCheckbox @bind-Value="departmentForm.IsActive" style="width: 1.125rem; height: 1.125rem; cursor: pointer;" />
                            <label style="font-size: 0.875rem; color: #2B1810; font-weight: 500; cursor: pointer; font-family: Georgia, serif;">Aktiv</label>
                        </div>
                        <div style="font-size: 0.75rem; color: #8B4513; margin-top: 0.25rem; font-family: Georgia, serif;">Endast aktiva ansvarsomr√•den kan v√§ljas f√∂r administrat√∂rer</div>
                    </div>
                    
                    <div style="display: flex; gap: 0.75rem; justify-content: flex-end; padding-top: 1rem; border-top: 1px solid #B09B7C;">
                        <button type="button" @onclick="CancelForm" style="padding: 0.75rem 1.5rem; background: #DFD9CE; border: 1px solid #B09B7C; color: #2B1810; border-radius: 0.375rem; cursor: pointer; font-weight: 600; font-family: Georgia, serif; transition: all 0.2s ease;" onmouseover="this.style.background='#B09B7C'; this.style.color='white';" onmouseout="this.style.background='#DFD9CE'; this.style.color='#2B1810';">Avbryt</button>
                        <button type="submit" disabled="@isProcessing" style="padding: 0.75rem 1.5rem; background: #8B4513; color: white; border: 1px solid #8B4513; border-radius: 0.375rem; cursor: pointer; font-weight: 600; font-family: Georgia, serif; transition: all 0.2s ease; @(isProcessing ? "opacity: 0.6; cursor: not-allowed;" : "")" onmouseover="if (!@isProcessing) { this.style.background='#6B3410'; }" onmouseout="if (!@isProcessing) { this.style.background='#8B4513'; }">
                            @if (isProcessing)
                            {
                                <span style="display: inline-block; width: 1rem; height: 1rem; border: 2px solid white; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin-right: 0.5rem;"></span>
                            }
                            @if (editingDepartment != null)
                            {
                                <span>üíæ Uppdatera</span>
                            }
                            else
                            {
                                <span>‚ûï Skapa</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success")" style="padding: 1rem 1.5rem; border-radius: 0.375rem; margin-bottom: 1.5rem; display: flex; justify-content: space-between; align-items: center; font-weight: 500; @(isError ? "background: rgba(239, 68, 68, 0.15); border: 1px solid #EF4444; color: #EF4444;" : "background: rgba(74, 124, 78, 0.15); border: 1px solid #4A7C4E; color: #4A7C4E;")">
            <span><strong>@(isError ? "Fel" : "Info"):</strong> @message</span>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => message = string.Empty" style="background: transparent; border: none; color: inherit; cursor: pointer; font-size: 1.25rem; padding: 0; opacity: 0.8; transition: opacity 0.2s ease;">‚úï</button>
        </div>
    }

    @if (departments != null && departments.Count > 0)
    {
        <div class="table-responsive table-container">
            <table class="table table-striped" style="width: 100%; border-collapse: collapse; background: #DFD9CE; border-radius: 0.5rem; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.15); border: 1px solid #B09B7C; margin: 1rem 0;">
                <thead style="background: #8B4513;">
                    <tr>
                        <th style="padding: 1rem; text-align: left; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">Namn</th>
                        <th style="padding: 1rem; text-align: left; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">Beskrivning</th>
                        <th style="padding: 1rem; text-align: left; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">Status</th>
                        <th style="padding: 1rem; text-align: left; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">Skapad</th>
                        <th style="padding: 1rem; text-align: left; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">Av</th>
                        <th style="padding: 1rem; text-align: center; font-weight: 700; font-size: 0.8125rem; text-transform: uppercase; color: white;">√Ötg√§rder</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var department in departments)
                    {
                        <tr style="transition: background-color 0.2s ease;">
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE;">
                                <div style="font-weight: 600; color: #2B1810;">@department.Name</div>
                            </td>
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE; color: #2B1810;">@(department.Description ?? "-")</td>
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE;">
                                @if (department.IsActive)
                                {
                                    <span class="badge" style="background: #4A7C4E; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 600;">Aktiv</span>
                                }
                                else
                                {
                                    <span class="badge" style="background: #6B7280; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 600;">Inaktiv</span>
                                }
                            </td>
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE; color: #2B1810;">@department.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE; color: #2B1810;">@department.CreatedByUserName</td>
                            <td style="padding: 1rem; border-bottom: 1px solid #B09B7C; vertical-align: middle; background: #DFD9CE; text-align: center;">
                                <div class="btn-group" role="group" style="display: flex; gap: 0.5rem; justify-content: center;">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditForm(department)" style="padding: 0.375rem 0.75rem; border: 1px solid #2563EB; background: transparent; color: #2563EB; border-radius: 0.25rem; font-size: 0.75rem; cursor: pointer; transition: all 0.2s ease; font-weight: 600; font-family: Georgia, serif;" onmouseover="this.style.background='#2563EB'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#2563EB';">
                                        ‚úèÔ∏è Redigera
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteDepartment(department.Id)" style="padding: 0.375rem 0.75rem; border: 1px solid #EF4444; background: transparent; color: #EF4444; border-radius: 0.25rem; font-size: 0.75rem; cursor: pointer; transition: all 0.2s ease; font-weight: 600; font-family: Georgia, serif;" onmouseover="this.style.background='#EF4444'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#EF4444';">
                                        üóëÔ∏è Ta bort
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div style="text-align: center; padding: 3rem; color: #5D4037;">
            <div style="font-size: 3rem; margin-bottom: 1rem; color: #B09B7C;">üè¢</div>
            <h4 style="color: #2B1810; margin-bottom: 0.5rem;">Inga ansvarsomr√•den hittades</h4>
            <p style="color: #5D4037;">B√∂rja med att skapa ett nytt ansvarsomr√•de.</p>
        </div>
    }
    }
</div>


@code {
    private List<DepartmentResponseDto> departments = new();
    private bool isLoading = true;
    private bool showCreateForm = false;
    private bool isProcessing = false;
    private bool isError = false;
    private string message = string.Empty;
    private DepartmentResponseDto? editingDepartment;
    private DepartmentFormModel departmentForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        try
        {
            isLoading = true;
            departments = await DepartmentService.GetAllDepartmentsAsync();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel vid laddning av ansvarsomr√•den: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleCreateForm()
    {
        if (showCreateForm)
        {
            CancelForm();
        }
        else
        {
            editingDepartment = null;
            departmentForm = new DepartmentFormModel { IsActive = true };
            showCreateForm = true;
        }
    }

    private void ShowEditForm(DepartmentResponseDto department)
    {
        editingDepartment = department;
        departmentForm = new DepartmentFormModel
        {
            Name = department.Name,
            Description = department.Description,
            IsActive = department.IsActive
        };
        showCreateForm = true;
    }

    private void CancelForm()
    {
        showCreateForm = false;
        editingDepartment = null;
        departmentForm = new();
    }

    private async Task SaveDepartment()
    {
        try
        {
            isProcessing = true;

            if (editingDepartment != null)
            {
                var updateDto = new UpdateDepartmentRequestDto
                {
                    Id = editingDepartment.Id,
                    Name = departmentForm.Name!,
                    Description = departmentForm.Description,
                    IsActive = departmentForm.IsActive
                };

                await DepartmentService.UpdateDepartmentAsync(updateDto);
                ShowMessage($"Ansvarsomr√•det '{departmentForm.Name}' har uppdaterats.", false);
            }
            else
            {
                var createDto = new CreateDepartmentRequestDto
                {
                    Name = departmentForm.Name!,
                    Description = departmentForm.Description,
                    IsActive = departmentForm.IsActive
                };

                await DepartmentService.CreateDepartmentAsync(createDto);
                ShowMessage($"Ansvarsomr√•det '{departmentForm.Name}' har skapats.", false);
            }

            CancelForm();
            await LoadDepartments();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteDepartment(Guid departmentId)
    {
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        if (department == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"√Ñr du s√§ker p√• att du vill ta bort ansvarsomr√•det '{department.Name}'? Detta kan inte √•ngras.");

        if (confirmed)
        {
            try
            {
                var success = await DepartmentService.DeleteDepartmentAsync(departmentId);
                if (success)
                {
                    ShowMessage($"Ansvarsomr√•det '{department.Name}' har tagits bort.", false);
                    await LoadDepartments();
                }
                else
                {
                    ShowMessage("Ansvarsomr√•det kunde inte tas bort.", true);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Fel vid borttagning: {ex.Message}", true);
            }
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
        StateHasChanged();

        // Clear message after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        });
    }

    public class DepartmentFormModel
    {
        [Required(ErrorMessage = "Namn √§r obligatoriskt")]
        [StringLength(100, ErrorMessage = "Namnet f√•r inte vara l√§ngre √§n 100 tecken")]
        public string? Name { get; set; }

        [StringLength(500, ErrorMessage = "Beskrivningen f√•r inte vara l√§ngre √§n 500 tecken")]
        public string? Description { get; set; }

        public bool IsActive { get; set; } = true;
    }
}