@page "/admin/anvandare"
@using GylleneDroppen.Application.Contants
@using Microsoft.AspNetCore.Authorization
@using GylleneDroppen.Core.Entities
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.User
@using Microsoft.AspNetCore.Identity

@inject IUserManagementService UserManagementService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ManageUsers> Logger

@rendermode InteractiveServer


@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Anv칛ndarhantering</PageTitle>

<h1>Anv칛ndarhantering</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div>
        <strong>@(statusMessage.StartsWith("Fel:") ? "Fel" : "Info"):</strong> @statusMessage
        <button @onclick="() => statusMessage = string.Empty">St칛ng</button>
    </div>
}

@{
    var regularUsers = users.Where(u => u.Role != "Admin").ToList();
}

<h2>Alla medlemmar (@regularUsers.Count)</h2>

@if (isLoading)
{
    <p>Laddar...</p>
}
else if (regularUsers.Any())
{
    <table>
        <thead>
        <tr>
            <th>E-post</th>
            <th>Namn</th>
            <th>Roll</th>
            <th>칀tg칛rder</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in regularUsers)
        {
            var uid = user.Id.ToString();

            <tr>
                <td>@user.Email</td>
                <td>@user.FullName</td>
                <td>@(user.Role == "User" ? "Medlem" : user.Role)</td>
                <td>
                    <button type="button" @onclick="async () => await PromoteUser(uid)">
                        L칛gg till i styrelsen
                    </button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}
else
{
    <p>Inga medlemmar hittades.</p>
}

<h2>Styrelsen (@adminUsers.Count)</h2>

@if (adminUsers.Any())
{
    @foreach (var admin in adminUsers)
    {
        <div>
            <p><strong>@admin.FullName</strong> - @admin.Email</p>
            <p>Roll: Styrelsemedlem @(admin.Id.ToString() == currentUserId ? "(Du)" : "")</p>

            @if (adminDepartments.ContainsKey(admin.Id.ToString()))
            {
                <p>Ansvarsomr친de: <strong>@Departments.GetDisplayName(adminDepartments[admin.Id.ToString()])</strong>
                </p>
            }
            else
            {
                <p>Ansvarsomr친de: <em>Inget tilldelat</em></p>
            }

            <div>
                @if (admin.Id.ToString() != currentUserId)
                {
                    <button type="button" @onclick="async () => await DemoteUser(admin.Id.ToString())"
                            disabled="@isProcessing">
                        Ta bort fr친n styrelsen
                    </button>
                }

                @if (showDepartmentForm && selectedAdminId == admin.Id.ToString())
                {
                    <select @bind="selectedDepartment">
                        <option value="">V칛lj ansvarsomr친de</option>
                        @foreach (var dept in Departments.All)
                        {
                            <option value="@dept.Value">@dept.DisplayName</option>
                        }
                    </select>
                    <button type="button" @onclick="async () => await SetDepartment(admin.Id.ToString())"
                            disabled="@isProcessing">
                        S칛tt ansvarsomr친de
                    </button>
                    <button type="button" @onclick="CancelDepartmentEdit">
                        Avbryt
                    </button>
                }
                else
                {
                    <button type="button" @onclick="() => ShowDepartmentForm(admin.Id.ToString())"
                            disabled="@isProcessing">
                        @(adminDepartments.ContainsKey(admin.Id.ToString()) ? "츿ndra ansvarsomr친de" : "S칛tt ansvarsomr친de")
                    </button>
                }

                @if (adminDepartments.ContainsKey(admin.Id.ToString()))
                {
                    <button type="button" @onclick="async () => await RemoveDepartment(admin.Id.ToString())"
                            disabled="@isProcessing">
                        Ta bort ansvarsomr친de
                    </button>
                }
            </div>
        </div>
    }
}
else
{
    <p>Inga styrelsemedlemmar hittades.</p>
}

@code {
    private List<UserResponseDto> users = new();
    private List<UserResponseDto> adminUsers = new();
    private Dictionary<string, string> adminDepartments = new();
    private string currentUserId = string.Empty;
    private string statusMessage = string.Empty;
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool showDepartmentForm = false;
    private string selectedAdminId = string.Empty;
    private string selectedDepartment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadUsers();
        await LoadAdminDepartments();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            currentUserId = user.Id;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            users = await UserManagementService.GetAllUsersAsync();
            adminUsers = await UserManagementService.GetAdminUsersAsync();
            Logger.LogInformation("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Loaded {UserCount} total users, {AdminCount} admins", users.Count, adminUsers.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            statusMessage = "Fel: Kunde inte ladda medlemmar";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            Logger.LogInformation("Loaded {UserCount} total users, {AdminCount} admins", users.Count, adminUsers.Count);
        }
    }

    private async Task LoadAdminDepartments()
    {
        adminDepartments.Clear();
        foreach (var admin in adminUsers)
        {
            var department = await UserManagementService.GetAdminDepartmentAsync(admin.Id.ToString());
            if (!string.IsNullOrEmpty(department))
            {
                adminDepartments[admin.Id.ToString()] = department;
            }
        }

        StateHasChanged();
    }

    public async Task PromoteUser(string userId)
    {
        Logger.LogWarning("游댠游댠游댠 PromoteUser CLICKED for {UserId}", userId);

        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.PromoteToAdminAsync(userId, currentUserId);
            Logger.LogInformation("PromoteToAdminAsync result for {UserId}: {Result}", userId, result);

            if (result)
            {
                statusMessage = "Medlemmen har lagts till i styrelsen.";
                await LoadUsers();
                await LoadAdminDepartments();

                var newlyPromoted = users.FirstOrDefault(u => u.Id.ToString() == userId);
                if (newlyPromoted != null && !adminUsers.Any(u => u.Id == newlyPromoted.Id))
                {
                    adminUsers.Add(newlyPromoted);
                }
            }
            else
            {
                statusMessage = $"Fel: PromoteToAdminAsync misslyckades f칬r ID: {userId}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error promoting user {UserId}", userId);
            statusMessage = "Fel: Ett ov칛ntat fel intr칛ffade vid till칛gg till styrelsen.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DemoteUser(string userId)
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.DemoteFromAdminAsync(userId, currentUserId);

            if (result)
            {
                statusMessage = "Medlemmen har tagits bort fr친n styrelsen.";
                await LoadUsers();
                await LoadAdminDepartments();
            }
            else
            {
                statusMessage = "Fel: Kunde inte ta bort medlemmen fr친n styrelsen. Det m친ste finnas minst en styrelsemedlem kvar.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error demoting user {UserId}", userId);
            statusMessage = "Fel: Ett ov칛ntat fel intr칛ffade vid borttagning fr친n styrelsen.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ShowDepartmentForm(string adminId)
    {
        selectedAdminId = adminId;
        selectedDepartment = adminDepartments.ContainsKey(adminId) ? adminDepartments[adminId] : "";
        showDepartmentForm = true;
        StateHasChanged();
    }

    private void CancelDepartmentEdit()
    {
        showDepartmentForm = false;
        selectedAdminId = string.Empty;
        selectedDepartment = string.Empty;
        StateHasChanged();
    }

    private async Task SetDepartment(string adminId)
    {
        if (isProcessing || string.IsNullOrEmpty(selectedDepartment)) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.SetAdminDepartmentAsync(adminId, selectedDepartment, currentUserId);

            if (result)
            {
                statusMessage = "Ansvarsomr친de har tilldelats styrelsemedlemmen.";
                await LoadAdminDepartments();
                CancelDepartmentEdit();
            }
            else
            {
                statusMessage = "Fel: Kunde inte tilldela ansvarsomr친de.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting department for admin {AdminId}", adminId);
            statusMessage = "Fel: Ett ov칛ntat fel intr칛ffade vid tilldelning av ansvarsomr친de.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RemoveDepartment(string adminId)
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.RemoveAdminDepartmentAsync(adminId, currentUserId);

            if (result)
            {
                statusMessage = "Ansvarsomr친de har tagits bort fr친n styrelsemedlemmen.";
                await LoadAdminDepartments();
            }
            else
            {
                statusMessage = "Fel: Kunde inte ta bort ansvarsomr친de.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing department from admin {AdminId}", adminId);
            statusMessage = "Fel: Ett ov칛ntat fel intr칛ffade vid borttagning av ansvarsomr친de.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

}
