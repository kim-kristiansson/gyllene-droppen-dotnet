@page "/admin/anvandare"
@using GylleneDroppen.Application.Contants
@using Microsoft.AspNetCore.Authorization
@using GylleneDroppen.Core.Entities
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.User
@using Microsoft.AspNetCore.Identity

@inject IUserManagementService UserManagementService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ManageUsers> Logger

@rendermode InteractiveServer


@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Anv√§ndarhantering</PageTitle>

<div class="manage-users-container">
    <div class="page-header">
        <h1>üë• Anv√§ndarhantering</h1>
        <div class="header-actions">
            <span class="user-count">Totalt: @users.Count anv√§ndare</span>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @(statusMessage.StartsWith("Fel:") ? "error" : "success")">
            <span><strong>@(statusMessage.StartsWith("Fel:") ? "Fel" : "Info"):</strong> @statusMessage</span>
            <button @onclick="() => statusMessage = string.Empty">‚úï</button>
        </div>
    }

    @{
        var regularUsers = users.Where(u => u.Role != "Admin").ToList();
    }

    <div class="user-section">
        <div class="section-header">
            <h2 class="section-title">
                üë§ Alla medlemmar
                <span class="user-count">@regularUsers.Count</span>
            </h2>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                Laddar medlemmar...
            </div>
        }
        else if (regularUsers.Any())
        {
            <table class="users-table">
                <thead>
                    <tr>
                        <th>E-postadress</th>
                        <th>Namn</th>
                        <th>Roll</th>
                        <th>√Ötg√§rder</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in regularUsers)
                    {
                        var uid = user.Id.ToString();

                        <tr>
                            <td>
                                <div class="user-email">@user.Email</div>
                            </td>
                            <td>
                                <div class="user-name">@user.FullName</div>
                            </td>
                            <td>
                                <span class="user-role member">
                                    @(user.Role == "User" ? "Medlem" : user.Role)
                                </span>
                            </td>
                            <td>
                                <div class="user-actions">
                                    <button type="button" @onclick="async () => await PromoteUser(uid)" 
                                            class="btn-promote" disabled="@isProcessing">
                                        L√§gg till i styrelsen
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">üë§</div>
                <h3>Inga medlemmar hittades</h3>
                <p>Det finns inga registrerade medlemmar att visa.</p>
            </div>
        }
    </div>

    <div class="user-section">
        <div class="section-header">
            <h2 class="section-title">
                üëë Styrelsen
                <span class="user-count">@adminUsers.Count</span>
            </h2>
        </div>

        @if (adminUsers.Any())
        {
            <div class="admin-grid">
                @foreach (var admin in adminUsers)
                {
                    <div class="admin-card @(admin.Id.ToString() == currentUserId ? "current-user" : "")">
                        <div class="admin-info">
                            <div class="admin-name">@admin.FullName</div>
                            <div class="admin-email">@admin.Email</div>
                            <div class="admin-role">
                                üõ°Ô∏è Styrelsemedlem @(admin.Id.ToString() == currentUserId ? "(Du)" : "")
                            </div>
                        </div>

                        <div class="admin-department @(adminDepartments.ContainsKey(admin.Id.ToString()) ? "" : "no-department")">
                            <div class="department-label">Ansvarsomr√•de</div>
                            @if (adminDepartments.ContainsKey(admin.Id.ToString()))
                            {
                                <div class="department-name">@Departments.GetDisplayName(adminDepartments[admin.Id.ToString()])</div>
                            }
                            else
                            {
                                <div class="department-name">Inget tilldelat</div>
                            }
                        </div>

                        <div class="admin-actions">
                            @if (admin.Id.ToString() != currentUserId)
                            {
                                <button type="button" @onclick="async () => await DemoteUser(admin.Id.ToString())"
                                        disabled="@isProcessing" class="btn-demote">
                                    Ta bort fr√•n styrelsen
                                </button>
                            }

                            @if (showDepartmentForm && selectedAdminId == admin.Id.ToString())
                            {
                                <select @bind="selectedDepartment" class="department-select">
                                    <option value="">V√§lj ansvarsomr√•de</option>
                                    @foreach (var dept in Departments.All)
                                    {
                                        <option value="@dept.Value">@dept.DisplayName</option>
                                    }
                                </select>
                                <button type="button" @onclick="async () => await SetDepartment(admin.Id.ToString())"
                                        disabled="@isProcessing" class="btn btn-primary btn-sm">
                                    S√§tt ansvarsomr√•de
                                </button>
                                <button type="button" @onclick="CancelDepartmentEdit" class="btn btn-secondary btn-sm">
                                    Avbryt
                                </button>
                            }
                            else
                            {
                                <button type="button" @onclick="() => ShowDepartmentForm(admin.Id.ToString())"
                                        disabled="@isProcessing" class="btn btn-outline-primary btn-sm">
                                    @(adminDepartments.ContainsKey(admin.Id.ToString()) ? "√Ñndra ansvarsomr√•de" : "S√§tt ansvarsomr√•de")
                                </button>
                            }

                            @if (adminDepartments.ContainsKey(admin.Id.ToString()))
                            {
                                <button type="button" @onclick="async () => await RemoveDepartment(admin.Id.ToString())"
                                        disabled="@isProcessing" class="btn btn-outline-secondary btn-sm">
                                    Ta bort ansvarsomr√•de
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">üëë</div>
                <h3>Inga styrelsemedlemmar hittades</h3>
                <p>Det finns inga styrelsemedlemmar att visa.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<UserResponseDto> users = new();
    private List<UserResponseDto> adminUsers = new();
    private Dictionary<string, string> adminDepartments = new();
    private string currentUserId = string.Empty;
    private string statusMessage = string.Empty;
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool showDepartmentForm = false;
    private string selectedAdminId = string.Empty;
    private string selectedDepartment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadUsers();
        await LoadAdminDepartments();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            currentUserId = user.Id;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            users = await UserManagementService.GetAllUsersAsync();
            adminUsers = await UserManagementService.GetAdminUsersAsync();
            Logger.LogInformation("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Loaded {UserCount} total users, {AdminCount} admins", users.Count, adminUsers.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            statusMessage = "Fel: Kunde inte ladda medlemmar";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            Logger.LogInformation("Loaded {UserCount} total users, {AdminCount} admins", users.Count, adminUsers.Count);
        }
    }

    private async Task LoadAdminDepartments()
    {
        adminDepartments.Clear();
        foreach (var admin in adminUsers)
        {
            var department = await UserManagementService.GetAdminDepartmentAsync(admin.Id.ToString());
            if (!string.IsNullOrEmpty(department))
            {
                adminDepartments[admin.Id.ToString()] = department;
            }
        }

        StateHasChanged();
    }

    public async Task PromoteUser(string userId)
    {
        Logger.LogWarning("üî•üî•üî• PromoteUser CLICKED for {UserId}", userId);

        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.PromoteToAdminAsync(userId, currentUserId);
            Logger.LogInformation("PromoteToAdminAsync result for {UserId}: {Result}", userId, result);

            if (result)
            {
                statusMessage = "Medlemmen har lagts till i styrelsen.";
                await LoadUsers();
                await LoadAdminDepartments();

                var newlyPromoted = users.FirstOrDefault(u => u.Id.ToString() == userId);
                if (newlyPromoted != null && !adminUsers.Any(u => u.Id == newlyPromoted.Id))
                {
                    adminUsers.Add(newlyPromoted);
                }
            }
            else
            {
                statusMessage = $"Fel: PromoteToAdminAsync misslyckades f√∂r ID: {userId}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error promoting user {UserId}", userId);
            statusMessage = "Fel: Ett ov√§ntat fel intr√§ffade vid till√§gg till styrelsen.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DemoteUser(string userId)
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.DemoteFromAdminAsync(userId, currentUserId);

            if (result)
            {
                statusMessage = "Medlemmen har tagits bort fr√•n styrelsen.";
                await LoadUsers();
                await LoadAdminDepartments();
            }
            else
            {
                statusMessage = "Fel: Kunde inte ta bort medlemmen fr√•n styrelsen. Det m√•ste finnas minst en styrelsemedlem kvar.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error demoting user {UserId}", userId);
            statusMessage = "Fel: Ett ov√§ntat fel intr√§ffade vid borttagning fr√•n styrelsen.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ShowDepartmentForm(string adminId)
    {
        selectedAdminId = adminId;
        selectedDepartment = adminDepartments.ContainsKey(adminId) ? adminDepartments[adminId] : "";
        showDepartmentForm = true;
        StateHasChanged();
    }

    private void CancelDepartmentEdit()
    {
        showDepartmentForm = false;
        selectedAdminId = string.Empty;
        selectedDepartment = string.Empty;
        StateHasChanged();
    }

    private async Task SetDepartment(string adminId)
    {
        if (isProcessing || string.IsNullOrEmpty(selectedDepartment)) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.SetAdminDepartmentAsync(adminId, selectedDepartment, currentUserId);

            if (result)
            {
                statusMessage = "Ansvarsomr√•de har tilldelats styrelsemedlemmen.";
                await LoadAdminDepartments();
                CancelDepartmentEdit();
            }
            else
            {
                statusMessage = "Fel: Kunde inte tilldela ansvarsomr√•de.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting department for admin {AdminId}", adminId);
            statusMessage = "Fel: Ett ov√§ntat fel intr√§ffade vid tilldelning av ansvarsomr√•de.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RemoveDepartment(string adminId)
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await UserManagementService.RemoveAdminDepartmentAsync(adminId, currentUserId);

            if (result)
            {
                statusMessage = "Ansvarsomr√•de har tagits bort fr√•n styrelsemedlemmen.";
                await LoadAdminDepartments();
            }
            else
            {
                statusMessage = "Fel: Kunde inte ta bort ansvarsomr√•de.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing department from admin {AdminId}", adminId);
            statusMessage = "Fel: Ett ov√§ntat fel intr√§ffade vid borttagning av ansvarsomr√•de.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

}
