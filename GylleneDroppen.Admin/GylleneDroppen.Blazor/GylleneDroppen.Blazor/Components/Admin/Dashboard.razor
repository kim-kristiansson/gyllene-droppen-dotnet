@page "/admin"
@using Microsoft.AspNetCore.Authorization
@using GylleneDroppen.Core.Entities
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Admin Dashboard</PageTitle>

<h1>Admin Dashboard</h1>
<p>Välkommen till admin-panelen!</p>

<h2>System Information</h2>
<p><strong>Server tid:</strong> @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</p>
<p><strong>Användare inloggad som:</strong> @currentUserEmail</p>
<p><strong>Användar-ID:</strong> <code>@currentUserId</code></p>

<h2>Användarstatistik</h2>

<p><strong>Totalt antal användare:</strong> @totalUsers</p>
<p><strong>Bekräftade e-postadresser:</strong> @confirmedEmails</p>
<p><strong>Obekräftade e-postadresser:</strong> @(totalUsers - confirmedEmails)</p>

<h2>Admin Actions</h2>

<p>
    <a href="/admin/anvandare">Hantera användare</a>
</p>

<p>
    <button type="button" @onclick="RefreshStats">Uppdatera statistik</button>
</p>

@if (isLoading)
{
    <p>Uppdaterar...</p>
}

@if (lastUpdated.HasValue)
{
    <p><small>Senast uppdaterad: @lastUpdated.Value.ToString("HH:mm:ss")</small></p>
}

<h2>Snabblänkar</h2>

<ul>
    <li><a href="/admin/anvandare">Befordra/degradera administratörer</a></li>
    <li><a href="/konto/hantera">Hantera ditt konto</a></li>
    <li><a href="/">Tillbaka till startsidan</a></li>
</ul>

@code {
    private string currentUserEmail = "";
    private string currentUserId = "";
    private int totalUsers = 0;
    private int confirmedEmails = 0;
    private bool isLoading = false;
    private DateTime? lastUpdated = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        await LoadStatistics();
    }

    private async Task LoadUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            currentUserEmail = user.Email ?? "Okänd";
            currentUserId = user.Id;
        }
    }

    private async Task LoadStatistics()
    {
        var users = UserManager.Users.ToList();
        totalUsers = users.Count;
        confirmedEmails = users.Count(u => u.EmailConfirmed);
        lastUpdated = DateTime.Now;
    }

    private async Task RefreshStats()
    {
        isLoading = true;
        StateHasChanged();

        await Task.Delay(500);
        await LoadStatistics();

        isLoading = false;
        StateHasChanged();
    }

}
