@page "/admin"
@using GylleneDroppen.Application.Dtos.Tasting
@using Microsoft.AspNetCore.Authorization
@using GylleneDroppen.Core.Entities
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.Whisky
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWhiskyService WhiskyService
@inject ITastingHistoryService TastingHistoryService

@attribute [Authorize(Policy = "AdminOnly")]

<PageTitle>Admin Dashboard</PageTitle>

<h1>Admin Dashboard</h1>
<p>Välkommen till admin-panelen!</p>

<h2>System Information</h2>
<p><strong>Server tid:</strong> @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</p>
<p><strong>Användare inloggad som:</strong> @currentUserEmail</p>
<p><strong>Användar-ID:</strong> <code>@currentUserId</code></p>

<div>
    <div>
        <h2>Användarstatistik</h2>
        <p><strong>Totalt antal användare:</strong> @totalUsers</p>
        <p><strong>Bekräftade e-postadresser:</strong> @confirmedEmails</p>
        <p><strong>Obekräftade e-postadresser:</strong> @(totalUsers - confirmedEmails)</p>
    </div>

    <div>
        <h2>Whisky-statistik</h2>
        <p><strong>Totalt antal whiskies:</strong> @totalWhiskies</p>
        <p><strong>Antal provningar:</strong> @totalTastings</p>
        <p><strong>Mest populära land:</strong> @mostPopularCountry</p>
        <p><strong>Mest populära region:</strong> @mostPopularRegion</p>
        <p><strong>Genomsnittlig ålder:</strong> @averageAge år</p>
        <p><strong>Genomsnittlig ABV:</strong> @averageAbv%</p>
    </div>
</div>

<h2>Senaste aktivitet</h2>

@if (recentTastings.Any())
{
    <div>
        <h3>Senaste provningar</h3>
        @foreach (var tasting in recentTastings.Take(5))
        {
            <div>
                <strong>@tasting.EventTitle</strong> - @tasting.WhiskyName
                <br>
                <small>@tasting.TastingDate.ToString("yyyy-MM-dd") av @tasting.OrganizedByUserName</small>
            </div>
        }
    </div>
}

@if (featuredWhiskies.Any())
{
    <div>
        <h3>Senast tillagda whiskies</h3>
        @foreach (var whisky in featuredWhiskies.Take(5))
        {
            <div>
                <strong>@whisky.Name</strong> - @whisky.Distillery
                <br>
                <small>@whisky.CreatedDate.ToString("yyyy-MM-dd") av @whisky.CreatedByUserName</small>
            </div>
        }
    </div>
}

<h2>Admin Actions</h2>

<div>
    <p>
        <a href="/admin/anvandare">Hantera användare</a>
    </p>
    <p>
        <a href="/admin/whiskies">Hantera whiskies</a>
    </p>
    <p>
        <a href="/admin/whiskies/create">Lägg till ny whisky</a>
    </p>
    <p>
        <a href="/whiskies">Visa alla whiskies</a>
    </p>
</div>

<p>
    <button type="button" @onclick="RefreshStats">Uppdatera statistik</button>
</p>

@if (isLoading)
{
    <p>Uppdaterar...</p>
}

@if (lastUpdated.HasValue)
{
    <p><small>Senast uppdaterad: @lastUpdated.Value.ToString("HH:mm:ss")</small></p>
}

<h2>Snabblänkar</h2>

<ul>
    <li><a href="/admin/anvandare">Befordra/degradera administratörer</a></li>
    <li><a href="/konto/hantera">Hantera ditt konto</a></li>
    <li><a href="/">Tillbaka till startsidan</a></li>
</ul>

@code {
    private string currentUserEmail = "";
    private string currentUserId = "";

    // User statistics
    private int totalUsers = 0;
    private int confirmedEmails = 0;

    // Whisky statistics
    private int totalWhiskies = 0;
    private int totalTastings = 0;
    private string mostPopularCountry = "";
    private string mostPopularRegion = "";
    private decimal averageAge = 0;
    private decimal averageAbv = 0;

    // Recent activity
    private List<TastingHistoryDto> recentTastings = new();
    private List<WhiskyResponseDto> featuredWhiskies = new();

    private bool isLoading = false;
    private DateTime? lastUpdated = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        await LoadStatistics();
    }

    private async Task LoadUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            currentUserEmail = user.Email ?? "Okänd";
            currentUserId = user.Id;
        }
    }

    private async Task LoadStatistics()
    {
        // Load user statistics
        var users = UserManager.Users.ToList();
        totalUsers = users.Count;
        confirmedEmails = users.Count(u => u.EmailConfirmed);

        // Load whisky statistics
        var searchResult = await WhiskyService.SearchWhiskiesAsync(new WhiskySearchDto { PageSize = int.MaxValue });
        var whiskies = searchResult.Whiskies;

        totalWhiskies = whiskies.Count;

        if (whiskies.Any())
        {
            // Most popular country
            mostPopularCountry = whiskies
                .GroupBy(w => w.Country)
                .OrderByDescending(g => g.Count())
                .FirstOrDefault()?.Key ?? "Ingen";

            // Most popular region
            mostPopularRegion = whiskies
                .GroupBy(w => w.Region)
                .OrderByDescending(g => g.Count())
                .FirstOrDefault()?.Key ?? "Ingen";

            // Average age (excluding NAS whiskies)
            var agedWhiskies = whiskies.Where(w => w.Age.HasValue).ToList();
            if (agedWhiskies.Any())
            {
                averageAge = (decimal)agedWhiskies.Average(w => w.Age!.Value);
            }

            // Average ABV
            averageAbv = whiskies.Average(w => w.Abv);

            // Total tastings
            totalTastings = whiskies.Sum(w => w.TastingCount);
        }

        // Load recent activity
        recentTastings = await TastingHistoryService.GetRecentTastingHistoryAsync(10);
        featuredWhiskies = await WhiskyService.GetFeaturedWhiskiesAsync(10);

        lastUpdated = DateTime.Now;
    }

    private async Task RefreshStats()
    {
        isLoading = true;
        StateHasChanged();

        await Task.Delay(500);
        await LoadStatistics();

        isLoading = false;
        StateHasChanged();
    }

}
