@page "/admin/lander-regioner"
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.WhiskyMetadata
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IWhiskyMetadataService WhiskyMetadataService
@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "AdminOnly")]
@rendermode InteractiveServer

<PageTitle>Hantera l√§nder och regioner</PageTitle>

<div style="padding: 1.5rem 0; background: #D4CCC0; color: #2B1810; font-family: Georgia, serif; min-height: 100vh;">
<div style="max-width: 1200px; margin: 0 auto; padding: 0 1rem;">
    <div style="display: flex; flex-direction: column; align-items: center; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 2px solid #B09B7C; text-align: center;">
        <h1 style="font-size: 2.25rem; color: #2B1810; margin: 0; font-weight: 600;">üåç Hantera l√§nder och regioner</h1>
        <p style="color: #6B5D54; margin: 0.5rem 0 0 0; font-size: 1rem;">Skapa och hantera l√§nder och deras whiskyregioner</p>
    </div>

    @if (isLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; padding: 3rem; color: #6B5D54; font-size: 1.125rem;">
            <div style="display: inline-block; width: 2rem; height: 2rem; border: 3px solid #B09B7C; border-radius: 50%; border-top-color: #8B4513; animation: spin 1s linear infinite; margin-right: 0.75rem;"></div>
            Laddar...
        </div>
    }
    else
    {
        <div style="margin-bottom: 1.5rem;">
            <button @onclick="ShowCreateCountryForm" 
                    style="padding: 0.75rem 1.5rem; background: #8B4513; color: white; border: none; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif;" 
                    onmouseover="this.style.background='#6B3410';" 
                    onmouseout="this.style.background='#8B4513';">
                ‚ûï Skapa nytt land
            </button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div style="padding: 1rem 1.5rem; border-radius: 0.375rem; margin-bottom: 1.5rem; display: flex; justify-content: space-between; align-items: center; font-weight: 500; @(isError ? "background: rgba(239, 68, 68, 0.15); border: 1px solid #EF4444; color: #EF4444;" : "background: rgba(74, 124, 78, 0.15); border: 1px solid #4A7C4E; color: #4A7C4E;")">
                @message
                <button @onclick="() => message = string.Empty" style="background: transparent; border: none; color: inherit; cursor: pointer; font-size: 1.25rem; padding: 0; opacity: 0.8; transition: opacity 0.2s ease;">‚úï</button>
            </div>
        }

        @if (countries != null && countries.Count > 0)
        {
            <div class="countries-container">
                @foreach (var country in countries.OrderBy(c => c.Name))
                {
                    <div class="country-card">
                        <div class="country-header">
                            <div class="country-info">
                                <h3 class="country-name">
                                    <i class="fas fa-flag"></i> @country.Name
                                </h3>
                                <div class="country-meta">
                                    <small class="text-muted">
                                        Skapad @country.CreatedDate.ToString("yyyy-MM-dd") av @country.CreatedByUserName
                                    </small>
                                </div>
                            </div>
                            <div class="country-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditCountryForm(country)">
                                    <i class="fas fa-edit"></i> Redigera
                                </button>
                                <button class="btn btn-sm btn-outline-success" @onclick="() => ShowCreateRegionForm(country.Id)">
                                    <i class="fas fa-plus"></i> L√§gg till region
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCountry(country.Id)">
                                    <i class="fas fa-trash"></i> Ta bort
                                </button>
                            </div>
                        </div>

                        <div class="regions-section">
                            <h4 class="regions-title">
                                <i class="fas fa-map-marker-alt"></i> Regioner (@GetRegionsForCountry(country.Id).Count())
                            </h4>
                            
                            @{
                                var countryRegions = GetRegionsForCountry(country.Id).ToList();
                            }
                            
                            @if (countryRegions.Any())
                            {
                                <div class="regions-grid">
                                    @foreach (var region in countryRegions.OrderBy(r => r.Name))
                                    {
                                        <div class="region-item">
                                            <div class="region-info">
                                                <span class="region-name">@region.Name</span>
                                                @if (!string.IsNullOrEmpty(region.Description))
                                                {
                                                    <span class="region-description">@region.Description</span>
                                                }
                                            </div>
                                            <div class="region-actions">
                                                <button class="btn btn-xs btn-outline-primary" @onclick="() => ShowEditRegionForm(region)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-xs btn-outline-danger" @onclick="() => DeleteRegion(region.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="no-regions">
                                    <i class="fas fa-map text-muted"></i>
                                    <p class="text-muted">Inga regioner √§n. Klicka "L√§gg till region" f√∂r att skapa en.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-globe fa-3x text-muted mb-3"></i>
                <h4>Inga l√§nder hittades</h4>
                <p class="text-muted">B√∂rja med att skapa ett nytt land.</p>
            </div>
        }
    }
</div>

<!-- Country Modal -->
<div class="modal fade @(showCountryModal ? "show" : "")" id="countryModal" tabindex="-1" style="display: @(showCountryModal ? "block" : "none");" aria-hidden="@(!showCountryModal)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @if (editingCountry != null)
                    {
                        <i class="fas fa-edit"></i> @("Redigera land")
                    }
                    else
                    {
                        <i class="fas fa-plus"></i> @("Skapa nytt land")
                    }
                </h5>
                <button type="button" class="btn-close" @onclick="CloseCountryModal"></button>
            </div>
            <EditForm Model="countryForm" OnValidSubmit="SaveCountry">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Namn *</label>
                        <InputText @bind-Value="countryForm.Name" class="form-control" placeholder="T.ex. Skottland" />
                        <ValidationMessage For="() => countryForm.Name" />
                    </div>



                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCountryModal">Avbryt</button>
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @if (editingCountry != null)
                        {
                            <i class="fas fa-save"></i> @("Uppdatera")
                        }
                        else
                        {
                            <i class="fas fa-plus"></i> @("Skapa")
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Region Modal -->
<div class="modal fade @(showRegionModal ? "show" : "")" id="regionModal" tabindex="-1" style="display: @(showRegionModal ? "block" : "none");" aria-hidden="@(!showRegionModal)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @if (editingRegion != null)
                    {
                        <i class="fas fa-edit"></i> @("Redigera region")
                    }
                    else
                    {
                        <i class="fas fa-plus"></i> @("Skapa ny region")
                    }
                </h5>
                <button type="button" class="btn-close" @onclick="CloseRegionModal"></button>
            </div>
            <EditForm Model="regionForm" OnValidSubmit="SaveRegion">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    @if (editingRegion == null && selectedCountryId != Guid.Empty)
                    {
                        var selectedCountry = countries?.FirstOrDefault(c => c.Id == selectedCountryId);
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            Skapar region f√∂r <strong>@selectedCountry?.Name</strong>
                        </div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Namn *</label>
                        <InputText @bind-Value="regionForm.Name" class="form-control" placeholder="T.ex. Speyside" />
                        <ValidationMessage For="() => regionForm.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Land *</label>
                        <InputSelect @bind-Value="regionForm.CountryId" class="form-select">
                            <option value="">V√§lj land...</option>
                            @foreach (var country in countries ?? Enumerable.Empty<CountryDto>())
                            {
                                <option value="@country.Id">@country.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => regionForm.CountryId" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Beskrivning</label>
                        <InputTextArea @bind-Value="regionForm.Description" class="form-control" rows="3" placeholder="Beskrivning av regionen..." />
                        <ValidationMessage For="() => regionForm.Description" />
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRegionModal">Avbryt</button>
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @if (editingRegion != null)
                        {
                            <i class="fas fa-save"></i> @("Uppdatera")
                        }
                        else
                        {
                            <i class="fas fa-plus"></i> @("Skapa")
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showCountryModal || showRegionModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<CountryDto> countries = new();
    private List<RegionDto> regions = new();
    private bool isLoading = true;
    private bool showCountryModal = false;
    private bool showRegionModal = false;
    private bool isProcessing = false;
    private bool isError = false;
    private string message = string.Empty;
    private CountryDto? editingCountry;
    private RegionDto? editingRegion;
    private Guid selectedCountryId = Guid.Empty;
    private CountryFormModel countryForm = new();
    private RegionFormModel regionForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            // Load sequentially to avoid DbContext concurrency issues
            countries = await WhiskyMetadataService.GetAllCountriesAsync();
            regions = await WhiskyMetadataService.GetAllRegionsAsync();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel vid laddning av data: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<RegionDto> GetRegionsForCountry(Guid countryId)
    {
        return regions.Where(r => r.CountryId == countryId);
    }

    // Country methods
    private void ShowCreateCountryForm()
    {
        editingCountry = null;
        countryForm = new CountryFormModel();
        showCountryModal = true;
    }

    private void ShowEditCountryForm(CountryDto country)
    {
        editingCountry = country;
        countryForm = new CountryFormModel
        {
            Name = country.Name,
        };
        showCountryModal = true;
    }

    private void CloseCountryModal()
    {
        showCountryModal = false;
        editingCountry = null;
        countryForm = new();
    }

    private async Task SaveCountry()
    {
        try
        {
            isProcessing = true;

            if (editingCountry != null)
            {
                var updateDto = new UpdateCountryRequestDto
                {
                    Name = countryForm.Name!,
                };

                await WhiskyMetadataService.UpdateCountryAsync(editingCountry.Id, updateDto);
                ShowMessage($"Landet '{countryForm.Name}' har uppdaterats.", false);
            }
            else
            {
                var createDto = new CreateCountryRequestDto
                {
                    Name = countryForm.Name!,
                };

                await WhiskyMetadataService.CreateCountryAsync(createDto);
                ShowMessage($"Landet '{countryForm.Name}' har skapats.", false);
            }

            CloseCountryModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteCountry(Guid countryId)
    {
        var country = countries.FirstOrDefault(c => c.Id == countryId);
        if (country == null) return;

        var regionsInCountry = GetRegionsForCountry(countryId).Count();
        var confirmMessage = regionsInCountry > 0 
            ? $"√Ñr du s√§ker p√• att du vill ta bort landet '{country.Name}' och dess {regionsInCountry} region(er)? Detta kan inte √•ngras."
            : $"√Ñr du s√§ker p√• att du vill ta bort landet '{country.Name}'? Detta kan inte √•ngras.";

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);

        if (confirmed)
        {
            try
            {
                var success = await WhiskyMetadataService.DeleteCountryAsync(countryId);
                if (success)
                {
                    ShowMessage($"Landet '{country.Name}' har tagits bort.", false);
                    await LoadData();
                }
                else
                {
                    ShowMessage("Landet kunde inte tas bort.", true);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Fel vid borttagning: {ex.Message}", true);
            }
        }
    }

    // Region methods
    private void ShowCreateRegionForm(Guid countryId)
    {
        editingRegion = null;
        selectedCountryId = countryId;
        regionForm = new RegionFormModel 
        { 
            CountryId = countryId
        };
        showRegionModal = true;
    }

    private void ShowEditRegionForm(RegionDto region)
    {
        editingRegion = region;
        selectedCountryId = Guid.Empty;
        regionForm = new RegionFormModel
        {
            Name = region.Name,
            CountryId = region.CountryId,
            Description = region.Description,
        };
        showRegionModal = true;
    }

    private void CloseRegionModal()
    {
        showRegionModal = false;
        editingRegion = null;
        selectedCountryId = Guid.Empty;
        regionForm = new();
    }

    private async Task SaveRegion()
    {
        try
        {
            isProcessing = true;

            if (editingRegion != null)
            {
                var updateDto = new UpdateRegionRequestDto
                {
                    Name = regionForm.Name!,
                    CountryId = regionForm.CountryId,
                    Description = regionForm.Description,
                };

                await WhiskyMetadataService.UpdateRegionAsync(editingRegion.Id, updateDto);
                ShowMessage($"Regionen '{regionForm.Name}' har uppdaterats.", false);
            }
            else
            {
                var createDto = new CreateRegionRequestDto
                {
                    Name = regionForm.Name!,
                    CountryId = regionForm.CountryId,
                    Description = regionForm.Description,
                };

                await WhiskyMetadataService.CreateRegionAsync(createDto);
                ShowMessage($"Regionen '{regionForm.Name}' har skapats.", false);
            }

            CloseRegionModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteRegion(Guid regionId)
    {
        var region = regions.FirstOrDefault(r => r.Id == regionId);
        if (region == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"√Ñr du s√§ker p√• att du vill ta bort regionen '{region.Name}'? Detta kan inte √•ngras.");

        if (confirmed)
        {
            try
            {
                var success = await WhiskyMetadataService.DeleteRegionAsync(regionId);
                if (success)
                {
                    ShowMessage($"Regionen '{region.Name}' har tagits bort.", false);
                    await LoadData();
                }
                else
                {
                    ShowMessage("Regionen kunde inte tas bort.", true);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Fel vid borttagning: {ex.Message}", true);
            }
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
        StateHasChanged();

        // Clear message after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        });
    }

    public class CountryFormModel
    {
        [Required(ErrorMessage = "Namn √§r obligatoriskt")]
        [StringLength(100, ErrorMessage = "Namnet f√•r inte vara l√§ngre √§n 100 tecken")]
        public string? Name { get; set; }

    }

    public class RegionFormModel
    {
        [Required(ErrorMessage = "Namn √§r obligatoriskt")]
        [StringLength(100, ErrorMessage = "Namnet f√•r inte vara l√§ngre √§n 100 tecken")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Land m√•ste v√§ljas")]
        public Guid CountryId { get; set; }

        [StringLength(500, ErrorMessage = "Beskrivningen f√•r inte vara l√§ngre √§n 500 tecken")]
        public string? Description { get; set; }

    }
}
</div>

<style>
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>