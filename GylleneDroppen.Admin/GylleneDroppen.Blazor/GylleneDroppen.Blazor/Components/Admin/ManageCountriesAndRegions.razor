@page "/admin/lander-regioner"
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.WhiskyMetadata
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IWhiskyMetadataService WhiskyMetadataService
@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "AdminOnly")]
@rendermode InteractiveServer

<PageTitle>Hantera l√§nder och regioner</PageTitle>

<div style="padding: 1.5rem 0; background: #D4CCC0; color: #2B1810; font-family: Georgia, serif; min-height: 100vh;">
<div style="max-width: 1200px; margin: 0 auto; padding: 0 1rem;">
    <div style="margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 2px solid #B09B7C;">
        <div style="display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; gap: 1rem;">
            <h1 style="font-size: 2.25rem; color: #2B1810; margin: 0; font-weight: 600;">üåç L√§nder & Regioner</h1>
            <div style="flex-shrink: 0;">
                <span style="font-size: 1rem; color: #6B5D54; font-weight: 500; white-space: nowrap;">@countries.Count l√§nder ‚Ä¢ @regions.Count regioner</span>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div style="padding: 1rem 1.5rem; border-radius: 0.375rem; margin-bottom: 1.5rem; display: flex; justify-content: space-between; align-items: center; font-weight: 500; @(statusMessage.StartsWith("Fel:") ? "background: rgba(239, 68, 68, 0.15); border: 1px solid #EF4444; color: #EF4444;" : "background: rgba(74, 124, 78, 0.15); border: 1px solid #4A7C4E; color: #4A7C4E;")">
            <span><strong>@(statusMessage.StartsWith("Fel:") ? "Fel" : "Info"):</strong> @statusMessage</span>
            <button @onclick="() => statusMessage = string.Empty" style="background: transparent; border: none; color: inherit; cursor: pointer; font-size: 1.25rem; padding: 0; opacity: 0.8; transition: opacity 0.2s ease;">‚úï</button>
        </div>
    }

    @if (isLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; padding: 3rem; color: #6B5D54; font-size: 1.125rem;">
            <div style="display: inline-block; width: 2rem; height: 2rem; border: 3px solid #B09B7C; border-radius: 50%; border-top-color: #8B4513; animation: spin 1s linear infinite; margin-right: 0.75rem;"></div>
            Laddar...
        </div>
    }
    else
    {
        <div style="margin-bottom: 3rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                <h2 style="font-size: 1.75rem; color: #2B1810; margin: 0; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                    üè¥ L√§nder
                    <span style="background: #8B4513; color: white; padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.875rem; font-weight: 500;">@countries.Count</span>
                </h2>
                <button @onclick="StartCreatingCountry" style="padding: 0.75rem 1.5rem; background: #8B4513; color: white; border: none; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s ease; font-family: Georgia, serif;" onmouseover="this.style.background='#6B3410';" onmouseout="this.style.background='#8B4513';">
                    ‚ûï L√§gg till land
                </button>
            </div>

            @if (showCreateCountryForm)
            {
                <div style="background: #F5F0E8; border: 1px solid #B09B7C; border-radius: 0.5rem; padding: 1.5rem; margin-bottom: 1.5rem;">
                    <h3 style="font-size: 1.125rem; color: #2B1810; margin: 0 0 1rem 0; font-weight: 600;">Skapa nytt land</h3>
                    <EditForm Model="countryForm" OnValidSubmit="SaveCountry">
                        <DataAnnotationsValidator />
                        <div style="display: grid; grid-template-columns: 1fr auto; gap: 1rem; align-items: end;">
                            <div>
                                <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-size: 0.875rem;">Landets namn</label>
                                <InputText @bind-Value="countryForm.Name" style="width: 100%; padding: 0.75rem 1rem; border: 1px solid #B09B7C; border-radius: 0.375rem; font-size: 1rem; background: white; color: #2B1810; font-family: Georgia, serif; transition: border-color 0.2s ease;" placeholder="T.ex. Skottland, Irland, Japan..." />
                                <ValidationMessage For="() => countryForm.Name" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.25rem; display: block;" />
                            </div>
                            <div style="display: flex; gap: 0.5rem;">
                                <button type="submit" disabled="@isProcessing" style="padding: 0.75rem 1.5rem; background: #4A7C4E; color: white; border: none; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s ease; font-family: Georgia, serif; @(isProcessing ? "opacity: 0.6; cursor: not-allowed;" : "")" onmouseover="if (!@isProcessing) { this.style.background='#3A5F3E'; }" onmouseout="if (!@isProcessing) { this.style.background='#4A7C4E'; }">
                                    @if (isProcessing)
                                    {
                                        <span style="display: inline-block; width: 1rem; height: 1rem; border: 2px solid white; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin-right: 0.5rem;"></span>
                                    }
                                    Spara
                                </button>
                                <button type="button" @onclick="CancelCreateCountry" style="padding: 0.75rem 1.5rem; background: #DFD9CE; color: #2B1810; border: 1px solid #B09B7C; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif;" onmouseover="this.style.background='#B09B7C'; this.style.color='white';" onmouseout="this.style.background='#DFD9CE'; this.style.color='#2B1810';">Avbryt</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            }

            @if (countries.Any())
            {
                <div style="display: grid; gap: 1rem;">
                    @foreach (var country in countries.OrderBy(c => c.Name))
                    {
                        <div style="background: #DFD9CE; border: 1px solid #B09B7C; border-radius: 0.5rem; padding: 1.5rem; transition: all 0.2s ease;" onmouseover="this.style.borderColor='#8B4513';" onmouseout="this.style.borderColor='#B09B7C';">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                                @if (editingCountryId == country.Id)
                                {
                                    <EditForm Model="countryForm" OnValidSubmit="SaveCountryEdit">
                                        <DataAnnotationsValidator />
                                        <div style="display: flex; align-items: center; gap: 1rem;">
                                            <InputText @bind-Value="countryForm.Name" style="font-size: 1.375rem; font-weight: 600; background: white; color: #2B1810; border: 1px solid #B09B7C; border-radius: 0.375rem; padding: 0.5rem 0.75rem; font-family: Georgia, serif; min-width: 200px;" />
                                            <button type="submit" disabled="@isProcessing" style="padding: 0.5rem 1rem; background: #4A7C4E; color: white; border: none; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s ease; font-family: Georgia, serif;">
                                                @if (isProcessing)
                                                {
                                                    <span style="display: inline-block; width: 0.875rem; height: 0.875rem; border: 2px solid white; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin-right: 0.5rem;"></span>
                                                }
                                                Spara
                                            </button>
                                            <button type="button" @onclick="CancelEditCountry" style="padding: 0.5rem 1rem; background: #DFD9CE; color: #2B1810; border: 1px solid #B09B7C; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif;">Avbryt</button>
                                        </div>
                                        <ValidationMessage For="() => countryForm.Name" style="color: #EF4444; font-size: 0.8125rem; margin-top: 0.5rem; display: block;" />
                                    </EditForm>
                                }
                                else
                                {
                                    <div>
                                        <h3 style="font-size: 1.375rem; font-weight: 600; color: #2B1810; margin: 0 0 0.25rem 0;">@country.Name</h3>
                                        <p style="margin: 0; color: #6B5D54; font-size: 0.875rem;">@GetRegionsForCountry(country.Id).Count() regioner ‚Ä¢ Skapad @country.CreatedDate.ToString("yyyy-MM-dd")</p>
                                    </div>
                                    <div style="display: flex; gap: 0.5rem;">
                                        <button @onclick="() => StartEditingCountry(country)" style="padding: 0.5rem 1rem; background: #F5F0E8; color: #8B4513; border: 1px solid #B09B7C; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif; font-size: 0.875rem;" onmouseover="this.style.background='#8B4513'; this.style.color='white';" onmouseout="this.style.background='#F5F0E8'; this.style.color='#8B4513';">
                                            ‚úèÔ∏è Redigera
                                        </button>
                                        <button @onclick="() => StartCreatingRegion(country.Id)" style="padding: 0.5rem 1rem; background: #4A7C4E; color: white; border: none; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s ease; font-family: Georgia, serif; font-size: 0.875rem;" onmouseover="this.style.background='#3A5F3E';" onmouseout="this.style.background='#4A7C4E';">
                                            ‚ûï L√§gg till region
                                        </button>
                                        <button @onclick="() => DeleteCountry(country.Id)" style="padding: 0.5rem 1rem; background: #F5F0E8; color: #EF4444; border: 1px solid #FECACA; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif; font-size: 0.875rem;" onmouseover="this.style.background='#EF4444'; this.style.color='white'; this.style.borderColor='#EF4444';" onmouseout="this.style.background='#F5F0E8'; this.style.color='#EF4444'; this.style.borderColor='#FECACA';">
                                            üóëÔ∏è Ta bort
                                        </button>
                                    </div>
                                }
                            </div>

                            @if (creatingRegionForCountryId == country.Id)
                            {
                                <div style="background: #F5F0E8; border: 1px solid #4A7C4E; border-radius: 0.375rem; padding: 1rem; margin-bottom: 1rem;">
                                    <h4 style="font-size: 1rem; color: #2B1810; margin: 0 0 1rem 0; font-weight: 600;">L√§gg till region</h4>
                                    <EditForm Model="regionForm" OnValidSubmit="SaveRegion">
                                        <DataAnnotationsValidator />
                                        <div style="display: grid; grid-template-columns: 1fr 1fr auto; gap: 1rem; align-items: end;">
                                            <div>
                                                <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-size: 0.8rem;">Regionens namn</label>
                                                <InputText @bind-Value="regionForm.Name" style="width: 100%; padding: 0.5rem 0.75rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 0.875rem; background: white; color: #2B1810; font-family: Georgia, serif;" placeholder="T.ex. Speyside" />
                                                <ValidationMessage For="() => regionForm.Name" style="color: #EF4444; font-size: 0.75rem; margin-top: 0.25rem; display: block;" />
                                            </div>
                                            <div>
                                                <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-size: 0.8rem;">Beskrivning</label>
                                                <InputText @bind-Value="regionForm.Description" style="width: 100%; padding: 0.5rem 0.75rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 0.875rem; background: white; color: #2B1810; font-family: Georgia, serif;" placeholder="Beskrivning av regionen" />
                                            </div>
                                            <div style="display: flex; gap: 0.5rem;">
                                                <button type="submit" disabled="@isProcessing" style="padding: 0.5rem 1rem; background: #4A7C4E; color: white; border: none; border-radius: 0.25rem; font-weight: 600; cursor: pointer; font-family: Georgia, serif; font-size: 0.875rem;">
                                                    @if (isProcessing)
                                                    {
                                                        <span style="display: inline-block; width: 0.75rem; height: 0.75rem; border: 2px solid white; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin-right: 0.5rem;"></span>
                                                    }
                                                    Spara
                                                </button>
                                                <button type="button" @onclick="CancelCreateRegion" style="padding: 0.5rem 1rem; background: #DFD9CE; color: #2B1810; border: 1px solid #B09B7C; border-radius: 0.25rem; font-weight: 600; cursor: pointer; font-family: Georgia, serif; font-size: 0.875rem;">Avbryt</button>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                            }

                            @{
                                var countryRegions = GetRegionsForCountry(country.Id).ToList();
                            }

                            @if (countryRegions.Any())
                            {
                                <div>
                                    <h4 style="font-size: 1rem; color: #2B1810; margin: 0 0 0.75rem 0; font-weight: 600;">üìç Regioner (@countryRegions.Count)</h4>
                                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 0.75rem;">
                                        @foreach (var region in countryRegions.OrderBy(r => r.Name))
                                        {
                                            <div style="background: white; border: 1px solid #E0D5C7; border-radius: 0.375rem; padding: 1rem; transition: all 0.2s ease;" onmouseover="this.style.borderColor='#8B4513';" onmouseout="this.style.borderColor='#E0D5C7';">
                                                @if (editingRegionId == region.Id)
                                                {
                                                    <EditForm Model="regionForm" OnValidSubmit="SaveRegionEdit">
                                                        <DataAnnotationsValidator />
                                                        <div style="margin-bottom: 0.75rem;">
                                                            <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-size: 0.8rem;">Regionens namn</label>
                                                            <InputText @bind-Value="regionForm.Name" style="width: 100%; padding: 0.5rem 0.75rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 0.875rem; background: #F5F0E8; color: #2B1810; font-family: Georgia, serif;" />
                                                            <ValidationMessage For="() => regionForm.Name" style="color: #EF4444; font-size: 0.75rem; margin-top: 0.25rem; display: block;" />
                                                        </div>
                                                        <div style="margin-bottom: 0.75rem;">
                                                            <label style="display: block; font-weight: 600; color: #2B1810; margin-bottom: 0.5rem; font-size: 0.8rem;">Beskrivning</label>
                                                            <InputTextArea @bind-Value="regionForm.Description" rows="2" style="width: 100%; padding: 0.5rem 0.75rem; border: 1px solid #B09B7C; border-radius: 0.25rem; font-size: 0.875rem; background: #F5F0E8; color: #2B1810; font-family: Georgia, serif; resize: vertical;" />
                                                        </div>
                                                        <div style="display: flex; gap: 0.5rem;">
                                                            <button type="submit" disabled="@isProcessing" style="padding: 0.5rem 1rem; background: #4A7C4E; color: white; border: none; border-radius: 0.25rem; font-weight: 600; cursor: pointer; font-family: Georgia, serif; font-size: 0.8rem;">
                                                                Spara
                                                            </button>
                                                            <button type="button" @onclick="CancelEditRegion" style="padding: 0.5rem 1rem; background: #DFD9CE; color: #2B1810; border: 1px solid #B09B7C; border-radius: 0.25rem; font-weight: 600; cursor: pointer; font-family: Georgia, serif; font-size: 0.8rem;">Avbryt</button>
                                                        </div>
                                                    </EditForm>
                                                }
                                                else
                                                {
                                                    <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                                                        <div style="flex: 1;">
                                                            <h5 style="font-size: 1rem; font-weight: 600; color: #2B1810; margin: 0 0 0.25rem 0;">@region.Name</h5>
                                                            @if (!string.IsNullOrEmpty(region.Description))
                                                            {
                                                                <p style="color: #6B5D54; margin: 0 0 0.5rem 0; font-size: 0.8rem; line-height: 1.3;">@region.Description</p>
                                                            }
                                                            <p style="color: #8B7355; margin: 0; font-size: 0.75rem; font-style: italic;">Skapad @region.CreatedDate.ToString("yyyy-MM-dd")</p>
                                                        </div>
                                                        <div style="display: flex; gap: 0.25rem; margin-left: 0.75rem;">
                                                            <button @onclick="() => StartEditingRegion(region)" style="padding: 0.25rem 0.5rem; background: #F5F0E8; color: #8B4513; border: 1px solid #B09B7C; border-radius: 0.2rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif; font-size: 0.75rem;" onmouseover="this.style.background='#8B4513'; this.style.color='white';" onmouseout="this.style.background='#F5F0E8'; this.style.color='#8B4513';">
                                                                ‚úèÔ∏è
                                                            </button>
                                                            <button @onclick="() => DeleteRegion(region.Id)" style="padding: 0.25rem 0.5rem; background: #F5F0E8; color: #EF4444; border: 1px solid #FECACA; border-radius: 0.2rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; font-family: Georgia, serif; font-size: 0.75rem;" onmouseover="this.style.background='#EF4444'; this.style.color='white'; this.style.borderColor='#EF4444';" onmouseout="this.style.background='#F5F0E8'; this.style.color='#EF4444'; this.style.borderColor='#FECACA';">
                                                                üóëÔ∏è
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div style="text-align: center; padding: 1.5rem; color: #6B5D54; font-style: italic;">
                                    Inga regioner √§n. Klicka "L√§gg till region" f√∂r att skapa en.
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div style="text-align: center; padding: 3rem; background: #F5F0E8; border: 2px dashed #B09B7C; border-radius: 0.5rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;">üåç</div>
                    <h3 style="font-size: 1.25rem; margin-bottom: 0.5rem; color: #2B1810;">Inga l√§nder hittades</h3>
                    <p style="color: #6B5D54; margin: 0; font-style: italic;">B√∂rja med att skapa ett nytt land.</p>
                </div>
            }
        </div>
    }
</div>
</div>

@code {
    private List<CountryDto> countries = new();
    private List<RegionDto> regions = new();
    private bool isLoading = true;
    private bool showCreateCountryForm = false;
    private bool isProcessing = false;
    private string statusMessage = string.Empty;
    
    // Inline editing state
    private Guid editingCountryId = Guid.Empty;
    private Guid editingRegionId = Guid.Empty;
    private Guid creatingRegionForCountryId = Guid.Empty;
    
    private CountryFormModel countryForm = new();
    private RegionFormModel regionForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            countries = await WhiskyMetadataService.GetAllCountriesAsync();
            regions = await WhiskyMetadataService.GetAllRegionsAsync();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel vid laddning av data: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<RegionDto> GetRegionsForCountry(Guid countryId)
    {
        return regions.Where(r => r.CountryId == countryId);
    }

    // Country methods
    private void StartCreatingCountry()
    {
        showCreateCountryForm = true;
        countryForm = new CountryFormModel();
    }

    private void CancelCreateCountry()
    {
        showCreateCountryForm = false;
        countryForm = new CountryFormModel();
    }

    private void StartEditingCountry(CountryDto country)
    {
        editingCountryId = country.Id;
        countryForm = new CountryFormModel
        {
            Name = country.Name,
        };
    }

    private void CancelEditCountry()
    {
        editingCountryId = Guid.Empty;
        countryForm = new CountryFormModel();
    }

    private async Task SaveCountry()
    {
        try
        {
            isProcessing = true;

            var createDto = new CreateCountryRequestDto
            {
                Name = countryForm.Name!,
            };

            await WhiskyMetadataService.CreateCountryAsync(createDto);
            ShowMessage($"Landet '{countryForm.Name}' har skapats.", false);

            CancelCreateCountry();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SaveCountryEdit()
    {
        try
        {
            isProcessing = true;

            var updateDto = new UpdateCountryRequestDto
            {
                Name = countryForm.Name!,
            };

            await WhiskyMetadataService.UpdateCountryAsync(editingCountryId, updateDto);
            ShowMessage($"Landet '{countryForm.Name}' har uppdaterats.", false);

            CancelEditCountry();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteCountry(Guid countryId)
    {
        var country = countries.FirstOrDefault(c => c.Id == countryId);
        if (country == null) return;

        var regionsInCountry = GetRegionsForCountry(countryId).Count();
        var confirmMessage = regionsInCountry > 0 
            ? $"√Ñr du s√§ker p√• att du vill ta bort landet '{country.Name}' och dess {regionsInCountry} region(er)? Detta kan inte √•ngras."
            : $"√Ñr du s√§ker p√• att du vill ta bort landet '{country.Name}'? Detta kan inte √•ngras.";

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);

        if (confirmed)
        {
            try
            {
                var success = await WhiskyMetadataService.DeleteCountryAsync(countryId);
                if (success)
                {
                    ShowMessage($"Landet '{country.Name}' har tagits bort.", false);
                    await LoadData();
                }
                else
                {
                    ShowMessage("Landet kunde inte tas bort.", true);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Fel vid borttagning: {ex.Message}", true);
            }
        }
    }

    // Region methods
    private void StartCreatingRegion(Guid countryId)
    {
        creatingRegionForCountryId = countryId;
        regionForm = new RegionFormModel 
        { 
            CountryId = countryId
        };
    }

    private void CancelCreateRegion()
    {
        creatingRegionForCountryId = Guid.Empty;
        regionForm = new RegionFormModel();
    }

    private void StartEditingRegion(RegionDto region)
    {
        editingRegionId = region.Id;
        regionForm = new RegionFormModel
        {
            Name = region.Name,
            CountryId = region.CountryId,
            Description = region.Description,
        };
    }

    private void CancelEditRegion()
    {
        editingRegionId = Guid.Empty;
        regionForm = new RegionFormModel();
    }

    private async Task SaveRegion()
    {
        try
        {
            isProcessing = true;

            var createDto = new CreateRegionRequestDto
            {
                Name = regionForm.Name!,
                CountryId = regionForm.CountryId,
                Description = regionForm.Description,
            };

            await WhiskyMetadataService.CreateRegionAsync(createDto);
            ShowMessage($"Regionen '{regionForm.Name}' har skapats.", false);

            CancelCreateRegion();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SaveRegionEdit()
    {
        try
        {
            isProcessing = true;

            var updateDto = new UpdateRegionRequestDto
            {
                Name = regionForm.Name!,
                CountryId = regionForm.CountryId,
                Description = regionForm.Description,
            };

            await WhiskyMetadataService.UpdateRegionAsync(editingRegionId, updateDto);
            ShowMessage($"Regionen '{regionForm.Name}' har uppdaterats.", false);

            CancelEditRegion();
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowMessage($"Fel: {ex.Message}", true);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteRegion(Guid regionId)
    {
        var region = regions.FirstOrDefault(r => r.Id == regionId);
        if (region == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"√Ñr du s√§ker p√• att du vill ta bort regionen '{region.Name}'? Detta kan inte √•ngras.");

        if (confirmed)
        {
            try
            {
                var success = await WhiskyMetadataService.DeleteRegionAsync(regionId);
                if (success)
                {
                    ShowMessage($"Regionen '{region.Name}' har tagits bort.", false);
                    await LoadData();
                }
                else
                {
                    ShowMessage("Regionen kunde inte tas bort.", true);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Fel vid borttagning: {ex.Message}", true);
            }
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        statusMessage = error ? $"Fel: {msg}" : msg;
        StateHasChanged();

        // Clear message after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            statusMessage = string.Empty;
            await InvokeAsync(StateHasChanged);
        });
    }

    public class CountryFormModel
    {
        [Required(ErrorMessage = "Namn √§r obligatoriskt")]
        [StringLength(100, ErrorMessage = "Namnet f√•r inte vara l√§ngre √§n 100 tecken")]
        public string? Name { get; set; }
    }

    public class RegionFormModel
    {
        [Required(ErrorMessage = "Namn √§r obligatoriskt")]
        [StringLength(100, ErrorMessage = "Namnet f√•r inte vara l√§ngre √§n 100 tecken")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Land m√•ste v√§ljas")]
        public Guid CountryId { get; set; }

        [StringLength(500, ErrorMessage = "Beskrivningen f√•r inte vara l√§ngre √§n 500 tecken")]
        public string? Description { get; set; }
    }
}

<style>
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>