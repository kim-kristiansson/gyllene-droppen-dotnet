@page "/whiskies/{WhiskyId:guid}"
@using GylleneDroppen.Application.Dtos.Tasting
@using GylleneDroppen.Application.Interfaces.Services
@using GylleneDroppen.Application.Dtos.Whisky
@using GylleneDroppen.Application.Services

@inject IWhiskyService WhiskyService
@inject ITastingHistoryService TastingHistoryService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

@if (whisky != null)
{
    <PageTitle>@whisky.Name - @whisky.Distillery</PageTitle>

    <div>
        <button @onclick="GoBack">← Tillbaka till listan</button>

        <AuthorizeView Policy="AdminOnly">
            <Authorized>
                <button @onclick="() => NavigationManager.NavigateTo($\"
                /admin/whiskies/edit/{whisky.Id}\")">
                Redigera
                </button>
            </Authorized>
        </AuthorizeView>
    </div>

    <div>
        @if (!string.IsNullOrEmpty(whisky.ImagePath))
        {
            <div>
                <img src="@whisky.ImagePath" alt="@whisky.Name" style="max-width: 400px; max-height: 400px;">
            </div>
        }

        <div>
            <h1>@whisky.Name</h1>
            <h2>@whisky.Distillery</h2>

            <div>
                <div>
                    <h3>Grundinformation</h3>
                    <p><strong>Land:</strong> @whisky.Country</p>
                    <p><strong>Region:</strong> @whisky.Region</p>
                    <p><strong>Typ:</strong> @whisky.Type</p>

                    @if (whisky.Age.HasValue)
                    {
                        <p><strong>Ålder:</strong> @whisky.Age år</p>
                    }
                    else
                    {
                        <p><strong>Ålder:</strong> NAS (No Age Statement)</p>
                    }

                    <p><strong>Alkoholhalt:</strong> @whisky.Abv%</p>

                    @if (whisky.Price.HasValue)
                    {
                        <p><strong>Pris:</strong> @whisky.Price.Value.ToString("C")</p>
                    }

                    @if (whisky.BottleSize.HasValue)
                    {
                        <p><strong>Flaskstorlek:</strong> @whisky.BottleSize ml</p>
                    }
                </div>

                @if (!string.IsNullOrEmpty(whisky.Color) || !string.IsNullOrEmpty(whisky.Nose) ||
                     !string.IsNullOrEmpty(whisky.Palate) || !string.IsNullOrEmpty(whisky.Finish))
                {
                    <div>
                        <h3>Provningsanteckningar</h3>

                        @if (!string.IsNullOrEmpty(whisky.Color))
                        {
                            <p><strong>Färg:</strong> @whisky.Color</p>
                        }

                        @if (!string.IsNullOrEmpty(whisky.Nose))
                        {
                            <p><strong>Doft:</strong> @whisky.Nose</p>
                        }

                        @if (!string.IsNullOrEmpty(whisky.Palate))
                        {
                            <p><strong>Smak:</strong> @whisky.Palate</p>
                        }

                        @if (!string.IsNullOrEmpty(whisky.Finish))
                        {
                            <p><strong>Eftersmak:</strong> @whisky.Finish</p>
                        }
                    </div>
                }
            </div>

            <div>
                <p><strong>Tillagd:</strong> @whisky.CreatedDate.ToString("yyyy-MM-dd") av @whisky.CreatedByUserName</p>
                @if (whisky.UpdatedDate.HasValue)
                {
                    <p><strong>Senast
                            uppdaterad:</strong> @whisky.UpdatedDate.Value.ToString("yyyy-MM-dd") av @whisky.UpdatedByUserName
                    </p>
                }
            </div>
        </div>
    </div>

    <div>
        <div>
            <h3>Provningshistorik (@tastingHistories.Count)</h3>

            <AuthorizeView Policy="AdminOnly">
                <Authorized>
                    <button @onclick="ShowAddTastingForm">Lägg till provning</button>
                </Authorized>
            </AuthorizeView>
        </div>

        @if (showAddTastingForm)
        {
            <div>
                <h4>Lägg till provning</h4>
                <EditForm Model="newTasting" OnValidSubmit="AddTasting">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div>
                        <label>Eventnamn:</label>
                        <InputText @bind-Value="newTasting.EventTitle"/>
                        <ValidationMessage For="() => newTasting.EventTitle"/>
                    </div>

                    <div>
                        <label>Datum:</label>
                        <InputDate @bind-Value="newTasting.TastingDate"/>
                        <ValidationMessage For="() => newTasting.TastingDate"/>
                    </div>

                    <div>
                        <label>Anteckningar:</label>
                        <InputTextArea @bind-Value="newTasting.Notes" rows="4"/>
                        <ValidationMessage For="() => newTasting.Notes"/>
                    </div>

                    <button type="submit" disabled="@isProcessing">Lägg till</button>
                    <button type="button" @onclick="CancelAddTasting">Avbryt</button>
                </EditForm>
            </div>
        }

        @if (tastingHistories.Any())
        {
            <div>
                @foreach (var tasting in tastingHistories)
                {
                    <div>
                        <h4>@tasting.EventTitle</h4>
                        <p><strong>Datum:</strong> @tasting.TastingDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>Organiserad av:</strong> @tasting.OrganizedByUserName</p>
                        @if (!string.IsNullOrEmpty(tasting.Notes))
                        {
                            <p><strong>Anteckningar:</strong> @tasting.Notes</p>
                        }

                        <AuthorizeView Policy="AdminOnly">
                            <Authorized>
                                <button @onclick="() => DeleteTasting(tasting.Id)" disabled="@isProcessing">
                                    Ta bort
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Denna whisky har inte provats än.</p>
        }
    </div>
}
else if (isLoading)
{
    <p>Laddar whisky...</p>
}
else
{
    <PageTitle>Whisky hittades inte</PageTitle>
    <h1>Whisky hittades inte</h1>
    <p>Whiskyn du letar efter finns inte.</p>
    <button @onclick="GoBack">Tillbaka till listan</button>
}

@code {
    [Parameter] public Guid WhiskyId { get; set; }

    private WhiskyResponseDto? whisky;
    private List<TastingHistoryDto> tastingHistories = new();
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool showAddTastingForm = false;
    private CreateTastingHistoryRequestDto newTasting = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWhisky();
    }

    private async Task LoadWhisky()
    {
        isLoading = true;

        try
        {
            whisky = await WhiskyService.GetWhiskyByIdAsync(WhiskyId);
            if (whisky != null)
            {
                tastingHistories = await TastingHistoryService.GetTastingHistoryByWhiskyIdAsync(WhiskyId);
                newTasting.WhiskyId = WhiskyId;
                newTasting.TastingDate = DateTime.Today;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading whisky: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/whiskies");
    }

    private void ShowAddTastingForm()
    {
        showAddTastingForm = true;
    }

    private void CancelAddTasting()
    {
        showAddTastingForm = false;
        newTasting = new CreateTastingHistoryRequestDto
        {
            WhiskyId = WhiskyId,
            TastingDate = DateTime.Today
        };
    }

    private async Task AddTasting()
    {
        if (!CurrentUserService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/konto/logga-in");
            return;
        }

        isProcessing = true;

        try
        {
            await TastingHistoryService.CreateTastingHistoryAsync(newTasting);
            await LoadWhisky();
            CancelAddTasting();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding tasting: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTasting(Guid tastingId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort denna provning?");
        if (!confirmed)
            return;

        isProcessing = true;

        try
        {
            await TastingHistoryService.DeleteTastingHistoryAsync(tastingId);
            await LoadWhisky();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting tasting: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

}