@page "/glomt-losenord"
@using System.Net.Mail
@rendermode InteractiveAuto
@inject HttpClient Http

<PageTitle>Glömt lösenord</PageTitle>

<h1>Glömt lösenord</h1>

<div>
    <p>Ange din e-postadress nedan för att få en länk för att återställa ditt lösenord.</p>

    <EditForm Model="@_resetRequest" OnValidSubmit="HandleSubmit" FormName="forgotPasswordForm">
        <div>
            <label for="email">E-post</label>
            <InputText id="email" @bind-Value="_resetRequest.Email"/>
            @if (!string.IsNullOrEmpty(_emailError))
            {
                <div>@_emailError</div>
            }
        </div>

        <button type="submit" disabled="@_isSubmitting">
            @if (_isSubmitting)
            {
                <span>Skickar...</span>
            }
            else
            {
                <span>Skicka återställningslänk</span>
            }
        </button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div>
            @_errorMessage
        </div>
    }

    @if (_requestSuccess)
    {
        <div>
            <p>
                Om e-postadressen finns i vårt system så har vi skickat instruktioner för att återställa ditt lösenord.
                Kontrollera din e-post och följ instruktionerna i meddelandet.
            </p>
            <p>
                <a href="/logga-in">Tillbaka till inloggning</a>
            </p>
        </div>
    }
    else
    {
        <div>
            <p><a href="/logga-in">Tillbaka till inloggning</a></p>
        </div>
    }
</div>

@code {

    private readonly Dictionary<string, string> _serverErrorTranslations = new()
    {
        ["Email not found"] = "E-postadressen hittades inte i vårt system."
    };

    private readonly PasswordResetRequest _resetRequest = new()
    {
        Email = string.Empty
    };

    private bool _isSubmitting;
    private bool _requestSuccess;
    private string? _errorMessage;
    private string? _emailError;

    private async Task HandleSubmit()
    {
        // Reset error messages
        _errorMessage = null;
        _emailError = null;

        // Basic validation
        var isValid = true;

        if (string.IsNullOrWhiteSpace(_resetRequest.Email))
        {
            _emailError = "E-post är obligatoriskt.";
            isValid = false;
        }
        else if (!IsValidEmail(_resetRequest.Email))
        {
            _emailError = "Ogiltig e-postadress.";
            isValid = false;
        }

        if (!isValid)
        {
            return;
        }

        _isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/request-password-reset", _resetRequest);

            if (response.IsSuccessStatusCode)
            {
                _requestSuccess = true;
                // We don't reset the form to maintain the email address in the input
                // as visual confirmation of what address the email was sent to
            }
            else
            {
                var errorResult = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                var errorMessage = errorResult?.Detail;

                // Always showing a success message even on error for security reasons
                // but we'll log the actual error for debugging
                Console.WriteLine($"Error requesting password reset: {errorMessage}");

                // Still show success message to prevent email enumeration attacks
                _requestSuccess = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett fel inträffade vid anslutning till servern. Vänligen försök igen senare.";
            Console.WriteLine($"Exception details: {ex}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private class ErrorResponse
    {
        public string? Detail { get; set; }
        public int? Status { get; set; }
    }

    public class PasswordResetRequest
    {
        public required string Email { get; set; }
    }

}

