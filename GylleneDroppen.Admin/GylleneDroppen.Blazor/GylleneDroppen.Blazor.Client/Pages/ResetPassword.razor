@page "/aterstall-losenord"
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Återställ lösenord</PageTitle>

<h1>Återställ lösenord</h1>

@if (!_hasLoadedParams)
{
    <p>Laddar...</p>
}
else if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_token))
{
    <div>
        <p>Ogiltig återställningslänk. Kontrollera att du använder rätt länk från e-postmeddelandet.</p>
        <p><a href="/glomt-losenord">Begär en ny återställningslänk</a></p>
    </div>
}
else if (_resetSuccess)
{
    <div>
        <p>Ditt lösenord har återställts!</p>
        <p><a href="/logga-in">Logga in med ditt nya lösenord</a></p>
    </div>
}
else
{
    <div>
        <p>Vänligen ange ditt nya lösenord nedan.</p>

        <EditForm Model="@_resetPasswordRequest" OnValidSubmit="HandleSubmit" FormName="resetPasswordForm">
            <div>
                <label for="newPassword">Nytt lösenord</label>
                <InputText id="newPassword" type="password" @bind-Value="_resetPasswordRequest.NewPassword"/>
                @if (!string.IsNullOrEmpty(_passwordError))
                {
                    <div>@_passwordError</div>
                }
            </div>

            <div>
                <label for="confirmPassword">Bekräfta lösenord</label>
                <InputText id="confirmPassword" type="password" @bind-Value="_confirmPassword"/>
                @if (!string.IsNullOrEmpty(_confirmPasswordError))
                {
                    <div>@_confirmPasswordError</div>
                }
            </div>

            <button type="submit" disabled="@_isSubmitting">
                @if (_isSubmitting)
                {
                    <span>Återställer lösenord...</span>
                }
                else
                {
                    <span>Återställ lösenord</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div>
                @_errorMessage
            </div>
        }

        <div>
            <p><a href="/logga-in">Tillbaka till inloggning</a></p>
        </div>
    </div>
}

@code {

    private readonly Dictionary<string, string> _serverErrorTranslations = new()
    {
        ["Invalid token."] = "Ogiltig eller utgången återställningslänk.",
        ["Email not found"] = "E-postadressen hittades inte i vårt system."
    };

    private readonly ResetPasswordRequest _resetPasswordRequest = new()
    {
        Email = string.Empty,
        Token = string.Empty,
        NewPassword = string.Empty
    };

    private string _confirmPassword = string.Empty;
    private string? _email;
    private string? _token;
    private bool _hasLoadedParams;
    private bool _isSubmitting;
    private bool _resetSuccess;
    private string? _errorMessage;
    private string? _passwordError;
    private string? _confirmPasswordError;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("epost", out var email) && queryParams.TryGetValue("kod", out var token))
        {
            _email = email;
            _token = token;
            _resetPasswordRequest.Email = email;
            _resetPasswordRequest.Token = token;
        }

        _hasLoadedParams = true;
    }

    private async Task HandleSubmit()
    {
        // Reset error messages
        _errorMessage = null;
        _passwordError = null;
        _confirmPasswordError = null;

        // Basic validation
        var isValid = true;

        if (string.IsNullOrWhiteSpace(_resetPasswordRequest.NewPassword))
        {
            _passwordError = "Nytt lösenord är obligatoriskt.";
            isValid = false;
        }
        else if (_resetPasswordRequest.NewPassword.Length < 6)
        {
            _passwordError = "Lösenordet måste vara minst 6 tecken långt.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(_confirmPassword))
        {
            _confirmPasswordError = "Bekräfta lösenord är obligatoriskt.";
            isValid = false;
        }
        else if (_resetPasswordRequest.NewPassword != _confirmPassword)
        {
            _confirmPasswordError = "Lösenorden matchar inte.";
            isValid = false;
        }

        if (!isValid)
        {
            return;
        }

        _isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/reset-password", _resetPasswordRequest);

            if (response.IsSuccessStatusCode)
            {
                _resetSuccess = true;
            }
            else
            {
                var errorResult = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                var errorMessage = errorResult?.Detail;

                _errorMessage = errorMessage != null && _serverErrorTranslations.TryGetValue(errorMessage, out var translation)
                    ? translation
                    : errorMessage ?? "Ett fel inträffade vid återställning av lösenord. Vänligen försök igen.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett fel inträffade vid anslutning till servern. Vänligen försök igen senare.";
            Console.WriteLine($"Exception details: {ex}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private class ErrorResponse
    {
        public string? Detail { get; set; }
        public int? Status { get; set; }
    }

// Matching the class used in your API
    public class ResetPasswordRequest
    {
        public required string Email { get; set; }
        public required string Token { get; set; }
        public required string NewPassword { get; set; }
    }

}
