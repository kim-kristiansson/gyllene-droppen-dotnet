@page "/registrera"
@using GylleneDroppen.Application.Dtos.Shared.Auth
@using GylleneDroppen.Blazor.Client.Components
@using GylleneDroppen.Blazor.Client.Validators
@rendermode InteractiveAuto
@inject HttpClient Http

<PageTitle>Registrera</PageTitle>

<RedirectToHome>
    <h1>Registrera</h1>

    <EditForm Model="@_registerRequest" OnValidSubmit="HandleRegistration" FormName="registerForm">
        <div>
            <label for="firstName">Förnamn</label>
            <InputText id="firstName" @bind-Value="_registerRequest.FirstName"
                       @onblur="() => ValidateField(nameof(_registerRequest.FirstName))"/>
            @if (_validator != null && _validator.HasErrors(nameof(_registerRequest.FirstName)))
            {
                @foreach (var error in _validator.GetErrors(nameof(_registerRequest.FirstName)))
                {
                    <div>@error</div>
                }
            }
        </div>

        <div>
            <label for="lastName">Efternamn</label>
            <InputText id="lastName" @bind-Value="_registerRequest.LastName"
                       @onblur="() => ValidateField(nameof(_registerRequest.LastName))"/>
            @if (_validator != null && _validator.HasErrors(nameof(_registerRequest.LastName)))
            {
                @foreach (var error in _validator.GetErrors(nameof(_registerRequest.LastName)))
                {
                    <div>@error</div>
                }
            }
        </div>

        <div>
            <label for="email">E-post</label>
            <InputText id="email" @bind-Value="_registerRequest.Email"
                       @onblur="() => ValidateField(nameof(_registerRequest.Email))"/>
            @if (_validator != null && _validator.HasErrors(nameof(_registerRequest.Email)))
            {
                @foreach (var error in _validator.GetErrors(nameof(_registerRequest.Email)))
                {
                    <div>@error</div>
                }
            }
        </div>

        <div>
            <label for="password">Lösenord</label>
            <InputText id="password" type="password" @bind-Value="_registerRequest.Password"
                       @onblur="() => ValidateField(nameof(_registerRequest.Password))"/>
            @if (_validator != null && _validator.HasErrors(nameof(_registerRequest.Password)))
            {
                @foreach (var error in _validator.GetErrors(nameof(_registerRequest.Password)))
                {
                    <div>@error</div>
                }
            }
        </div>

        <div>
            <label for="confirmPassword">Bekräfta lösenord</label>
            <InputText id="confirmPassword" type="password" @bind-Value="_registerRequest.ConfirmPassword"
                       @onblur="() => ValidateField(nameof(_registerRequest.ConfirmPassword))"/>
            @if (_validator != null && _validator.HasErrors(nameof(_registerRequest.ConfirmPassword)))
            {
                @foreach (var error in _validator.GetErrors(nameof(_registerRequest.ConfirmPassword)))
                {
                    <div>@error</div>
                }
            }
        </div>

        <button type="submit" disabled="@_isRegistering" @onclick="ValidateForm">
            @if (_isRegistering)
            {
                <span>Registrerar...</span>
            }
            else
            {
                <span>Registrera</span>
            }
        </button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div>
            @_errorMessage
        </div>
    }

    @if (_registrationSuccess)
    {
        <div>
            Registreringen lyckades! Vänligen kontrollera din e-post för att bekräfta ditt konto.
        </div>
    }

    <div>
        <p>Har du redan ett konto? <a href="/logga-in">Logga in</a></p>
    </div>
</RedirectToHome>

@code {

    private readonly Dictionary<string, string> _serverErrorTranslations = new()
    {
        ["Email already exists."] = "E-postadressen används redan av ett annat konto.",
        ["A verification code has already been sent. Please check your email."] = "En verifieringskod har redan skickats. Vänligen kontrollera din e-post."
    };

    private RegisterRequest _registerRequest = new()
    {
        Email = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        Password = string.Empty,
        ConfirmPassword = string.Empty
    };

    private RegisterValidator? _validator;
    private bool _isRegistering;
    private bool _registrationSuccess;
    private string? _errorMessage;
    private bool _formIsValid;

    protected override void OnInitialized()
    {
        _validator = new RegisterValidator(_registerRequest);
    }

    private void ValidateField(string fieldName)
    {
        // This will validate just one field for immediate feedback
        var tempValidator = new RegisterValidator(_registerRequest);
        tempValidator.Validate();

        // Update the main validator's errors for this field
        if (_validator != null && _validator.HasErrors(fieldName))
        {
            _validator.GetAllErrors()[fieldName] = tempValidator.GetErrors(fieldName);
        }
        else if (tempValidator.HasErrors(fieldName))
        {
            if (_validator != null && !_validator.GetAllErrors().ContainsKey(fieldName))
            {
                _validator.GetAllErrors()[fieldName] = [];
            }

            if (_validator != null) _validator.GetAllErrors()[fieldName] = tempValidator.GetErrors(fieldName);
        }
    }

    private void ValidateForm()
    {
        _validator = new RegisterValidator(_registerRequest);
        _formIsValid = _validator.Validate();
        StateHasChanged();
    }

    private async Task HandleRegistration()
    {
        // First validate entire form again
        _validator = new RegisterValidator(_registerRequest);
        if (!_validator.Validate())
        {
            return; // Don't proceed if validation fails
        }

        _isRegistering = true;
        _errorMessage = null;
        _registrationSuccess = false;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", _registerRequest);

            if (response.IsSuccessStatusCode)
            {
                _registrationSuccess = true;
                _registerRequest = new RegisterRequest
                {
                    Email = string.Empty,
                    FirstName = string.Empty,
                    LastName = string.Empty,
                    Password = string.Empty,
                    ConfirmPassword = string.Empty
                }; // Reset form
            }
            else
            {
                var errorResult = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                var errorMessage = errorResult?.Detail;

                _errorMessage = errorMessage != null && _serverErrorTranslations.TryGetValue(errorMessage, out var translation)
                    ? translation
                    : errorMessage ?? "Registreringen misslyckades. Vänligen försök igen.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett fel inträffade vid anslutning till servern. Vänligen försök igen senare.";
            Console.WriteLine($"Exception details: {ex}");
        }
        finally
        {
            _isRegistering = false;
        }
    }

    private class ErrorResponse
    {
        public string? Detail { get; set; }
        public int? Status { get; set; }
    }

}