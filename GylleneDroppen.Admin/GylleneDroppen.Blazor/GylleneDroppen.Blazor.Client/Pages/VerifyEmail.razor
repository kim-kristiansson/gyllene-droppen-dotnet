@page "/verifiera-epost"
@using GylleneDroppen.Application.Dtos.Email
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Verifiera e-post</PageTitle>

<h1>Verifiera e-post</h1>

@if (_isVerifying)
{
    <p>Verifierar din e-post...</p>
}
else if (_isVerified)
{
    <div>
        <p>Din e-post har verifierats framgångsrikt!</p>
        <p>Du kan nu <a href="/logga-in">logga in</a> på ditt konto.</p>
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <div>
        <p>Det uppstod ett fel vid verifiering av din e-post:</p>
        <p>@_errorMessage</p>
        <p>Vänligen kontakta kundtjänst eller försök igen senare.</p>
    </div>
}
else
{
    <p>Laddar...</p>
}

@code {

    private readonly Dictionary<string, string> _serverErrorTranslations = new()
    {
        ["Invalid confirmation code."] = "Ogiltig verifieringskod.",
        ["Confirmation code expired or invalid."] = "Verifieringskoden har gått ut eller är ogiltig.",
        ["Email already verified."] = "E-postadressen är redan verifierad.",
        ["Email not found."] = "E-postadressen kunde inte hittas.",
        ["The verification code has expired."] = "Verifieringskoden har gått ut."
    };

    private bool _isVerifying;
    private bool _isVerified;
    private string _errorMessage = string.Empty;
    private bool _hasRunAfterRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasRunAfterRender)
        {
            _hasRunAfterRender = true;

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("epost", out var email) &&
                QueryHelpers.ParseQuery(uri.Query).TryGetValue("kod", out var code))
            {
                await ProcessVerification(email, code);
            }
            else
            {
                _errorMessage = "Ogiltig verifieringslänk. Kontrollera att du använder rätt länk från e-postmeddelandet.";
                StateHasChanged(); // Uppdatera UI direkt om länken är ogiltig
            }
        }
    }

    private async Task ProcessVerification(string email, string code)
    {
        _isVerifying = true;
        StateHasChanged();

        try
        {
            var confirmRequest = new ConfirmEmailRequest
            {
                Email = email,
                ConfirmationCode = code
            };

            var response = await Http.PostAsJsonAsync("api/auth/confirm-email", confirmRequest);

            if (response.IsSuccessStatusCode)
            {
                _isVerified = true;
            }
            else
            {
                var errorResult = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                var errorDetail = errorResult?.Detail;

                // Translate error message if we have a translation, otherwise use the original message
                _errorMessage = errorDetail != null && _serverErrorTranslations.TryGetValue(errorDetail, out var translation)
                    ? translation
                    : errorDetail ?? "Verifieringen misslyckades. Koden kan ha löpt ut eller är ogiltig.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett fel inträffade vid kommunikation med servern. Vänligen försök igen senare.";
            Console.WriteLine($"Exception details: {ex}");
        }
        finally
        {
            _isVerifying = false;
            StateHasChanged();
        }
    }

    private class ErrorResponse
    {
        public string? Detail { get; set; }
        public int? Status { get; set; }
    }

}