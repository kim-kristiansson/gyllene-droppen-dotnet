@page "/me"
@using GylleneDroppen.Application.Dtos.Shared.Auth
@using GylleneDroppen.Blazor.Client.Services
@inject AuthService AuthService
@inject HttpClient Http
@rendermode InteractiveAuto

<PageTitle>Behörighetstest</PageTitle>

<h1>Behörighetstest</h1>

<section>
    <h2>Testa behörighet</h2>
    <button @onclick="TestAuthorization">Testa serverbehörighet</button>

    @if (_isLoading)
    {
        <p>Testar behörighet...</p>
    }
    else if (_testPerformed)
    {
        @if (_isAuthorized)
        {
            <section>
                <h3>✅ BEHÖRIGHET GODKÄND</h3>
                <p>Skyddad slutpunkt åtkomstd!</p>

                @if (_currentUser != null)
                {
                    <div>
                        <h4>Dina användaruppgifter:</h4>
                        <ul>
                            <li><strong>E-post:</strong> @_currentUser.Email</li>
                            <li><strong>Användar-ID:</strong> @_currentUser.Id</li>
                            <li><strong>Roll:</strong> @_currentUser.Role</li>
                        </ul>
                    </div>
                }
            </section>
        }
        else
        {
            <section>
                <h3>❌ INGEN BEHÖRIGHET</h3>
                <p>@_errorMessage</p>
            </section>
        }
    }
</section>

@code {
    private bool _isLoading;
    private bool _testPerformed;
    private bool _isAuthorized;
    private string _errorMessage = string.Empty;
    private CurrentUserResponse? _currentUser;

    private async Task TestAuthorization()
    {
        _isLoading = true;
        _testPerformed = false;
        _isAuthorized = false;
        _errorMessage = string.Empty;
        _currentUser = null;

        try
        {
            _currentUser = await AuthService.GetCurrentUserAsync();

            if (_currentUser != null)
            {
                _isAuthorized = true;
            }
            else
            {
                _isAuthorized = false;
                _errorMessage = "Kunde inte hämta användare. Du är kanske inte inloggad.";
            }
        }
        catch (Exception ex)
        {
            _isAuthorized = false;
            _errorMessage = $"Fel vid test av behörighet: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            _testPerformed = true;
        }
    }

}