@page "/me"
@using GylleneDroppen.Application.Dtos.Shared.Auth
@inject HttpClient Http
@rendermode InteractiveAuto

<PageTitle>Authorization Test</PageTitle>

<div class="container mt-4">
    <h1>Authorization Test</h1>

    <div class="card">
        <div class="card-header">
            <h5>Test Authorization</h5>
        </div>
        <div class="card-body">
            <button @onclick="TestAuthorization" class="btn btn-primary">Test Server Authorization</button>

            @if (_isLoading)
            {
                <div class="mt-3">Testing authorization...</div>
            }
            else if (_testPerformed)
            {
                <div class="mt-3">
                    @if (_isAuthorized)
                    {
                        <div class="alert alert-success">
                            <strong>✅ AUTHORIZED</strong>
                            <p>Successfully accessed protected endpoint!</p>
                        </div>

                        @if (_currentUser != null)
                        {
                            <div>
                                <h6>Your user details:</h6>
                                <ul>
                                    <li><strong>Email:</strong> @_currentUser.Email</li>
                                    <li><strong>User ID:</strong> @_currentUser.Id</li>
                                    <li><strong>Role:</strong> @_currentUser.Role</li>
                                </ul>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <strong>❌ NOT AUTHORIZED</strong>
                            <p>@_errorMessage</p>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool _isLoading;
    private bool _testPerformed;
    private bool _isAuthorized;
    private string _errorMessage = string.Empty;
    private CurrentUserResponse? _currentUser;

    private async Task TestAuthorization()
    {
        _isLoading = true;
        _testPerformed = false;
        _isAuthorized = false;
        _errorMessage = string.Empty;
        _currentUser = null;

        try
        {
            // Try to access a protected endpoint
            var response = await Http.GetAsync("api/auth/current-user");

            if (response.IsSuccessStatusCode)
            {
                _isAuthorized = true;
                _currentUser = await response.Content.ReadFromJsonAsync<CurrentUserResponse>();
            }
            else
            {
                _isAuthorized = false;
                _errorMessage = $"Failed to access protected endpoint. Status code: {response.StatusCode}";

                // Try to read error details
                try
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(errorContent))
                    {
                        _errorMessage += $"\nDetails: {errorContent}";
                    }
                }
                catch
                {
                    // Ignore error reading content
                }
            }
        }
        catch (Exception ex)
        {
            _isAuthorized = false;
            _errorMessage = $"Error testing authorization: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            _testPerformed = true;
        }
    }

}