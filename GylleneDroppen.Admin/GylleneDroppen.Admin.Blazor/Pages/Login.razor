@page "/login"
@layout MainLayout
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using GylleneDroppen.Admin.Blazor.Services
@using GylleneDroppen.Application.Dtos.Auth
@implements IDisposable

<PageTitle>Logga in - Gyllene Droppen Admin</PageTitle>

<div class="container d-flex align-items-center justify-content-center min-vh-100">
    <div class="row justify-content-center w-100">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">Gyllene Droppen Admin</h4>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @_errorMessage
                            <button type="button" class="btn-close" @onclick="DismissError" aria-label="Stäng"></button>
                        </div>
                    }

                    <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin" id="loginForm">
                        <DataAnnotationsValidator/>

                        <div class="mb-3">
                            <label for="email" class="form-label">E-postadress</label>
                            <InputText id="email" class="form-control" @bind-Value="_loginModel.Email"
                                       placeholder="namn@exempel.se"/>
                            <ValidationMessage For="@(() => _loginModel.Email)" class="text-danger"/>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Lösenord</label>
                            <div class="input-group">
                                <InputText id="password" type="@(_showPassword ? "text" : "password")"
                                           class="form-control"
                                           @bind-Value="_loginModel.Password" placeholder="Ange ditt lösenord"/>
                                <button class="btn btn-outline-secondary" type="button"
                                        @onclick="TogglePasswordVisibility" tabindex="-1">
                                    <i class="bi @(_showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => _loginModel.Password)" class="text-danger"/>
                        </div>

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"
                                          aria-hidden="true"></span>
                                    <span>Loggar in...</span>
                                }
                                else
                                {
                                    <span>Logga in</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center py-3 text-muted">
                    <small>&copy; @DateTime.Now.Year Gyllene Droppen</small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly LoginRequest _loginModel = new() { Email = "", Password = "" };
    private string _errorMessage = "";
    private bool _isLoading;
    private bool _showPassword;
    private Timer? _redirectTimer;

    protected override void OnInitialized()
    {
        // Check for error in URL query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Query.Contains("error="))
        {
            var queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .Select(parameter => parameter.Split('='))
                .ToDictionary(
                    parts => parts[0],
                    parts => parts.Length > 1 ? Uri.UnescapeDataString(parts[1]) : string.Empty
                );

            if (queryParameters.TryGetValue("error", out var error))
            {
                _errorMessage = error;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // If user is already authenticated, redirect to home or returnUrl
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParameters = uri.Query.TrimStart('?')
                .Split('&')
                .Select(parameter => parameter.Split('='))
                .ToDictionary(
                    parts => parts[0],
                    parts => parts.Length > 1 ? Uri.UnescapeDataString(parts[1]) : string.Empty
                );

            if (queryParameters.TryGetValue("returnUrl", out var returnUrl) && !string.IsNullOrEmpty(returnUrl))
            {
                NavigationManager.NavigateTo(returnUrl);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private void DismissError()
    {
        _errorMessage = "";
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private async Task HandleLogin()
    {
        try
        {
            _isLoading = true;
            _errorMessage = "";

            var result = await AuthService.LoginAsync(_loginModel);

            if (result.Success)
            {
                // Check for return URL in the query string
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                var queryParameters = uri.Query.TrimStart('?')
                    .Split('&')
                    .Select(parameter => parameter.Split('='))
                    .ToDictionary(
                        parts => parts[0],
                        parts => parts.Length > 1 ? Uri.UnescapeDataString(parts[1]) : string.Empty
                    );

                if (queryParameters.TryGetValue("returnUrl", out var returnUrl) && !string.IsNullOrEmpty(returnUrl))
                {
                    NavigationManager.NavigateTo(returnUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("/", true);
                }
            }
            else
            {
                _errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ett tekniskt fel inträffade: " + ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    public void Dispose()
    {
        _redirectTimer?.Dispose();
    }

}