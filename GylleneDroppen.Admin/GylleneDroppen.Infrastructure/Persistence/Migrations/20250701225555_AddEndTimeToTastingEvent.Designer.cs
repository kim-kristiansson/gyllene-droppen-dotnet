// <auto-generated />
using System;
using GylleneDroppen.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GylleneDroppen.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701225555_AddEndTimeToTastingEvent")]
    partial class AddEndTimeToTastingEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Country_Name");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("IX_Department_CreatedByUserId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Department_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Department_Name");

                    b.HasIndex("UpdatedByUserId")
                        .HasDatabaseName("IX_Department_UpdatedByUserId");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasDatabaseName("IX_Department_Value");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.MembershipPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DurationInMonths")
                        .HasDatabaseName("IX_MembershipPeriod_DurationInMonths");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_MembershipPeriod_IsActive");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MembershipPeriods");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_Region_CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique()
                        .HasDatabaseName("IX_Region_Name_CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingEventParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Attended")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TastingEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TastingEventId")
                        .HasDatabaseName("IX_TastingEventParticipant_TastingEventId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TastingEventParticipant_UserId");

                    b.HasIndex("TastingEventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_TastingEventParticipant_TastingEventId_UserId");

                    b.ToTable("TastingEventParticipants");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingEventWhisky", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TastingEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WhiskyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("Order")
                        .HasDatabaseName("IX_TastingEventWhisky_Order");

                    b.HasIndex("TastingEventId")
                        .HasDatabaseName("IX_TastingEventWhisky_TastingEventId");

                    b.HasIndex("WhiskyId")
                        .HasDatabaseName("IX_TastingEventWhisky_WhiskyId");

                    b.HasIndex("TastingEventId", "WhiskyId")
                        .IsUnique()
                        .HasDatabaseName("IX_TastingEventWhisky_TastingEventId_WhiskyId");

                    b.ToTable("TastingEventWhiskies");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OrganizedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TastingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WhiskyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizedByUserId")
                        .HasDatabaseName("IX_TastingHistory_OrganizedByUserId");

                    b.HasIndex("TastingDate")
                        .HasDatabaseName("IX_TastingHistory_TastingDate");

                    b.HasIndex("WhiskyId")
                        .HasDatabaseName("IX_TastingHistory_WhiskyId");

                    b.ToTable("TastingHistories");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.UserMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MembershipPeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_UserMembership_EndDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserMembership_IsActive");

                    b.HasIndex("MembershipPeriodId");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_UserMembership_StartDate");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserMembership_UserId");

                    b.HasIndex("UserId", "EndDate")
                        .HasDatabaseName("IX_UserMembership_UserId_EndDate");

                    b.ToTable("UserMemberships");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.UserTrialUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("HasUsedTrial")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("TrialUsedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TrialUsedForEventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_UserTrialUsage_Email");

                    b.HasIndex("HasUsedTrial")
                        .HasDatabaseName("IX_UserTrialUsage_HasUsedTrial");

                    b.HasIndex("TrialUsedForEventId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserTrialUsage_UserId");

                    b.ToTable("UserTrialUsages");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.WhiskyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("OriginCountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OriginRegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_WhiskyType_Name");

                    b.HasIndex("OriginCountryId");

                    b.HasIndex("OriginRegionId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("WhiskyTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TastingEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventDate")
                        .HasDatabaseName("IX_TastingEvent_EventDate");

                    b.HasIndex("IsPublic")
                        .HasDatabaseName("IX_TastingEvent_IsPublic");

                    b.HasIndex("OrganizedByUserId")
                        .HasDatabaseName("IX_TastingEvent_OrganizedByUserId");

                    b.ToTable("TastingEvents");
                });

            modelBuilder.Entity("Whisky", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Abv")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BottleSize")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Distillery")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Finish")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nose")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Palate")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhiskyTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Whisky_CreatedDate");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("IX_Whisky_RegionId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("WhiskyTypeId")
                        .HasDatabaseName("IX_Whisky_WhiskyTypeId");

                    b.HasIndex("Name", "Distillery")
                        .IsUnique()
                        .HasDatabaseName("IX_Whisky_Name_Distillery");

                    b.ToTable("Whiskies");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Country", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Department", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.MembershipPeriod", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Region", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingEventParticipant", b =>
                {
                    b.HasOne("TastingEvent", "TastingEvent")
                        .WithMany("Participants")
                        .HasForeignKey("TastingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TastingEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingEventWhisky", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TastingEvent", "TastingEvent")
                        .WithMany("TastingEventWhiskies")
                        .HasForeignKey("TastingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whisky", "Whisky")
                        .WithMany()
                        .HasForeignKey("WhiskyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("TastingEvent");

                    b.Navigation("Whisky");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.TastingHistory", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "OrganizedByUser")
                        .WithMany()
                        .HasForeignKey("OrganizedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Whisky", "Whisky")
                        .WithMany("TastingHistories")
                        .HasForeignKey("WhiskyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizedByUser");

                    b.Navigation("Whisky");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.UserMembership", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.MembershipPeriod", "MembershipPeriod")
                        .WithMany("UserMemberships")
                        .HasForeignKey("MembershipPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("MembershipPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.UserTrialUsage", b =>
                {
                    b.HasOne("TastingEvent", "TrialUsedForEvent")
                        .WithMany()
                        .HasForeignKey("TrialUsedForEventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "User")
                        .WithOne("TrialUsage")
                        .HasForeignKey("GylleneDroppen.Core.Entities.UserTrialUsage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrialUsedForEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.WhiskyType", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.Country", "OriginCountry")
                        .WithMany()
                        .HasForeignKey("OriginCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GylleneDroppen.Core.Entities.Region", "OriginRegion")
                        .WithMany()
                        .HasForeignKey("OriginRegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("OriginCountry");

                    b.Navigation("OriginRegion");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TastingEvent", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "OrganizedByUser")
                        .WithMany()
                        .HasForeignKey("OrganizedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizedByUser");
                });

            modelBuilder.Entity("Whisky", b =>
                {
                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GylleneDroppen.Core.Entities.Region", "Region")
                        .WithMany("Whiskies")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GylleneDroppen.Core.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GylleneDroppen.Core.Entities.WhiskyType", "WhiskyType")
                        .WithMany("Whiskies")
                        .HasForeignKey("WhiskyTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Region");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("WhiskyType");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.MembershipPeriod", b =>
                {
                    b.Navigation("UserMemberships");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.Region", b =>
                {
                    b.Navigation("Whiskies");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.WhiskyType", b =>
                {
                    b.Navigation("Whiskies");
                });

            modelBuilder.Entity("TastingEvent", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("TastingEventWhiskies");
                });

            modelBuilder.Entity("Whisky", b =>
                {
                    b.Navigation("TastingHistories");
                });

            modelBuilder.Entity("GylleneDroppen.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("TrialUsage");
                });
#pragma warning restore 612, 618
        }
    }
}
